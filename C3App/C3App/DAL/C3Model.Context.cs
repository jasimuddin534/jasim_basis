//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace C3App.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class C3Entities : DbContext
    {
        public C3Entities()
            : base("name=C3Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Account> Accounts { get; set; }
        public DbSet<AccountType> AccountTypes { get; set; }
        public DbSet<ACLAction> ACLActions { get; set; }
        public DbSet<ACLFunction> ACLFunctions { get; set; }
        public DbSet<ACLRole> ACLRoles { get; set; }
        public DbSet<Audit> Audits { get; set; }
        public DbSet<BankAccountsInfo> BankAccountsInfoes { get; set; }
        public DbSet<Call> Calls { get; set; }
        public DbSet<Campaign> Campaigns { get; set; }
        public DbSet<CampaignStatus> CampaignStatuses { get; set; }
        public DbSet<CampaignTarget> CampaignTargets { get; set; }
        public DbSet<CampaignType> CampaignTypes { get; set; }
        public DbSet<CasePriority> CasePriorities { get; set; }
        public DbSet<Case> Cases { get; set; }
        public DbSet<CaseStatus> CaseStatuses { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<CompanyModule> CompanyModules { get; set; }
        public DbSet<CompanyType> CompanyTypes { get; set; }
        public DbSet<Contact> Contacts { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<CreditCardsInfo> CreditCardsInfoes { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<DateFormat> DateFormats { get; set; }
        public DbSet<Discount> Discounts { get; set; }
        public DbSet<DocumentCategory> DocumentCategories { get; set; }
        public DbSet<Document> Documents { get; set; }
        public DbSet<DocumentStatus> DocumentStatuses { get; set; }
        public DbSet<DocumentSubcategory> DocumentSubcategories { get; set; }
        public DbSet<DocumentTemplate> DocumentTemplates { get; set; }
        public DbSet<Email> Emails { get; set; }
        public DbSet<EmailTemplate> EmailTemplates { get; set; }
        public DbSet<EmailType> EmailTypes { get; set; }
        public DbSet<Error> Errors { get; set; }
        public DbSet<Extension> Extensions { get; set; }
        public DbSet<InvoicePayTerm> InvoicePayTerms { get; set; }
        public DbSet<Invoice> Invoices { get; set; }
        public DbSet<InvoiceStage> InvoiceStages { get; set; }
        public DbSet<Language> Languages { get; set; }
        public DbSet<Lead> Leads { get; set; }
        public DbSet<LeadSource> LeadSources { get; set; }
        public DbSet<LeadStatus> LeadStatuses { get; set; }
        public DbSet<Manufacturer> Manufacturers { get; set; }
        public DbSet<MeetingInvitee> MeetingInvitees { get; set; }
        public DbSet<Meeting> Meetings { get; set; }
        public DbSet<MeetingStatus> MeetingStatuses { get; set; }
        public DbSet<MetaData> MetaDatas { get; set; }
        public DbSet<Module> Modules { get; set; }
        public DbSet<Notification> Notifications { get; set; }
        public DbSet<NotificationType> NotificationTypes { get; set; }
        public DbSet<Opportunity> Opportunities { get; set; }
        public DbSet<OpportunitySalesStage> OpportunitySalesStages { get; set; }
        public DbSet<OpportunityType> OpportunityTypes { get; set; }
        public DbSet<OrderDetail> OrderDetails { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderStage> OrderStages { get; set; }
        public DbSet<Payment> Payments { get; set; }
        public DbSet<PaymentTerm> PaymentTerms { get; set; }
        public DbSet<PaymentType> PaymentTypes { get; set; }
        public DbSet<PricingFormula> PricingFormulas { get; set; }
        public DbSet<ProductCategory> ProductCategories { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductStatus> ProductStatuses { get; set; }
        public DbSet<ProductType> ProductTypes { get; set; }
        public DbSet<ReportColumn> ReportColumns { get; set; }
        public DbSet<ReportFilter> ReportFilters { get; set; }
        public DbSet<Report> Reports { get; set; }
        public DbSet<ShortMessage> ShortMessages { get; set; }
        public DbSet<ShortMessageTemplate> ShortMessageTemplates { get; set; }
        public DbSet<Task> Tasks { get; set; }
        public DbSet<TaskStatus> TaskStatuses { get; set; }
        public DbSet<Team> Teams { get; set; }
        public DbSet<TeamSet> TeamSets { get; set; }
        public DbSet<TimeFormat> TimeFormats { get; set; }
        public DbSet<TimeZone> TimeZones { get; set; }
        public DbSet<UserLogin> UserLogins { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<QuoteDetail> QuoteDetails { get; set; }
        public DbSet<Quote> Quotes { get; set; }
        public DbSet<QuoteStage> QuoteStages { get; set; }
        public DbSet<Deal> Deals { get; set; }
        public DbSet<Note> Notes { get; set; }
    
        public virtual ObjectResult<uspPaymentInsert_Result> uspPaymentInsert(Nullable<int> companyID, Nullable<decimal> amount, Nullable<decimal> bankFee, Nullable<long> accountID, string customerReference, Nullable<int> currencyID, Nullable<long> paymentBy, Nullable<System.DateTime> paymentDate, Nullable<int> paymentTypeID, string paymentNumber, string paymentTransactionID, Nullable<int> status, Nullable<int> creditCardID, Nullable<int> bankAccountID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var bankFeeParameter = bankFee.HasValue ?
                new ObjectParameter("BankFee", bankFee) :
                new ObjectParameter("BankFee", typeof(decimal));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var customerReferenceParameter = customerReference != null ?
                new ObjectParameter("CustomerReference", customerReference) :
                new ObjectParameter("CustomerReference", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var paymentByParameter = paymentBy.HasValue ?
                new ObjectParameter("PaymentBy", paymentBy) :
                new ObjectParameter("PaymentBy", typeof(long));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var paymentNumberParameter = paymentNumber != null ?
                new ObjectParameter("PaymentNumber", paymentNumber) :
                new ObjectParameter("PaymentNumber", typeof(string));
    
            var paymentTransactionIDParameter = paymentTransactionID != null ?
                new ObjectParameter("PaymentTransactionID", paymentTransactionID) :
                new ObjectParameter("PaymentTransactionID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var creditCardIDParameter = creditCardID.HasValue ?
                new ObjectParameter("CreditCardID", creditCardID) :
                new ObjectParameter("CreditCardID", typeof(int));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPaymentInsert_Result>("uspPaymentInsert", companyIDParameter, amountParameter, bankFeeParameter, accountIDParameter, customerReferenceParameter, currencyIDParameter, paymentByParameter, paymentDateParameter, paymentTypeIDParameter, paymentNumberParameter, paymentTransactionIDParameter, statusParameter, creditCardIDParameter, bankAccountIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspPaymentSelect_Result> uspPaymentSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPaymentSelect_Result>("uspPaymentSelect");
        }
    
        public virtual ObjectResult<uspPaymentUpdate_Result> uspPaymentUpdate(Nullable<int> companyID, Nullable<decimal> amount, Nullable<decimal> bankFee, Nullable<long> accountID, string customerReference, Nullable<int> currencyID, Nullable<long> paymentBy, Nullable<System.DateTime> paymentDate, Nullable<int> paymentTypeID, string paymentNumber, string paymentTransactionID, Nullable<int> status, Nullable<int> creditCardID, Nullable<int> bankAccountID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<int> paymentID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var bankFeeParameter = bankFee.HasValue ?
                new ObjectParameter("BankFee", bankFee) :
                new ObjectParameter("BankFee", typeof(decimal));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var customerReferenceParameter = customerReference != null ?
                new ObjectParameter("CustomerReference", customerReference) :
                new ObjectParameter("CustomerReference", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var paymentByParameter = paymentBy.HasValue ?
                new ObjectParameter("PaymentBy", paymentBy) :
                new ObjectParameter("PaymentBy", typeof(long));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var paymentNumberParameter = paymentNumber != null ?
                new ObjectParameter("PaymentNumber", paymentNumber) :
                new ObjectParameter("PaymentNumber", typeof(string));
    
            var paymentTransactionIDParameter = paymentTransactionID != null ?
                new ObjectParameter("PaymentTransactionID", paymentTransactionID) :
                new ObjectParameter("PaymentTransactionID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var creditCardIDParameter = creditCardID.HasValue ?
                new ObjectParameter("CreditCardID", creditCardID) :
                new ObjectParameter("CreditCardID", typeof(int));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPaymentUpdate_Result>("uspPaymentUpdate", companyIDParameter, amountParameter, bankFeeParameter, accountIDParameter, customerReferenceParameter, currencyIDParameter, paymentByParameter, paymentDateParameter, paymentTypeIDParameter, paymentNumberParameter, paymentTransactionIDParameter, statusParameter, creditCardIDParameter, bankAccountIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, paymentIDParameter);
        }
    
        public virtual ObjectResult<uspAccountInsert_Result> uspAccountInsert(Nullable<int> companyID, string name, Nullable<int> accountTypesID, Nullable<long> parentID, Nullable<int> industryID, Nullable<int> rating, Nullable<decimal> annualRevenue, string officePhone, string alternatePhone, string primaryEmail, string alternateEmail, string fax, string website, string ownership, string employees, string sICCode, string billingStreet, string billingCity, string billingState, string billingPost, Nullable<int> billingCountry, string shippingStreet, string shippingCity, string shippingState, string shippingPost, Nullable<int> shippingCountry, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountTypesIDParameter = accountTypesID.HasValue ?
                new ObjectParameter("AccountTypesID", accountTypesID) :
                new ObjectParameter("AccountTypesID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var industryIDParameter = industryID.HasValue ?
                new ObjectParameter("IndustryID", industryID) :
                new ObjectParameter("IndustryID", typeof(int));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            var annualRevenueParameter = annualRevenue.HasValue ?
                new ObjectParameter("AnnualRevenue", annualRevenue) :
                new ObjectParameter("AnnualRevenue", typeof(decimal));
    
            var officePhoneParameter = officePhone != null ?
                new ObjectParameter("OfficePhone", officePhone) :
                new ObjectParameter("OfficePhone", typeof(string));
    
            var alternatePhoneParameter = alternatePhone != null ?
                new ObjectParameter("AlternatePhone", alternatePhone) :
                new ObjectParameter("AlternatePhone", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var alternateEmailParameter = alternateEmail != null ?
                new ObjectParameter("AlternateEmail", alternateEmail) :
                new ObjectParameter("AlternateEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var ownershipParameter = ownership != null ?
                new ObjectParameter("Ownership", ownership) :
                new ObjectParameter("Ownership", typeof(string));
    
            var employeesParameter = employees != null ?
                new ObjectParameter("Employees", employees) :
                new ObjectParameter("Employees", typeof(string));
    
            var sICCodeParameter = sICCode != null ?
                new ObjectParameter("SICCode", sICCode) :
                new ObjectParameter("SICCode", typeof(string));
    
            var billingStreetParameter = billingStreet != null ?
                new ObjectParameter("BillingStreet", billingStreet) :
                new ObjectParameter("BillingStreet", typeof(string));
    
            var billingCityParameter = billingCity != null ?
                new ObjectParameter("BillingCity", billingCity) :
                new ObjectParameter("BillingCity", typeof(string));
    
            var billingStateParameter = billingState != null ?
                new ObjectParameter("BillingState", billingState) :
                new ObjectParameter("BillingState", typeof(string));
    
            var billingPostParameter = billingPost != null ?
                new ObjectParameter("BillingPost", billingPost) :
                new ObjectParameter("BillingPost", typeof(string));
    
            var billingCountryParameter = billingCountry.HasValue ?
                new ObjectParameter("BillingCountry", billingCountry) :
                new ObjectParameter("BillingCountry", typeof(int));
    
            var shippingStreetParameter = shippingStreet != null ?
                new ObjectParameter("ShippingStreet", shippingStreet) :
                new ObjectParameter("ShippingStreet", typeof(string));
    
            var shippingCityParameter = shippingCity != null ?
                new ObjectParameter("ShippingCity", shippingCity) :
                new ObjectParameter("ShippingCity", typeof(string));
    
            var shippingStateParameter = shippingState != null ?
                new ObjectParameter("ShippingState", shippingState) :
                new ObjectParameter("ShippingState", typeof(string));
    
            var shippingPostParameter = shippingPost != null ?
                new ObjectParameter("ShippingPost", shippingPost) :
                new ObjectParameter("ShippingPost", typeof(string));
    
            var shippingCountryParameter = shippingCountry.HasValue ?
                new ObjectParameter("ShippingCountry", shippingCountry) :
                new ObjectParameter("ShippingCountry", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAccountInsert_Result>("uspAccountInsert", companyIDParameter, nameParameter, accountTypesIDParameter, parentIDParameter, industryIDParameter, ratingParameter, annualRevenueParameter, officePhoneParameter, alternatePhoneParameter, primaryEmailParameter, alternateEmailParameter, faxParameter, websiteParameter, ownershipParameter, employeesParameter, sICCodeParameter, billingStreetParameter, billingCityParameter, billingStateParameter, billingPostParameter, billingCountryParameter, shippingStreetParameter, shippingCityParameter, shippingStateParameter, shippingPostParameter, shippingCountryParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspAccountUpdate_Result> uspAccountUpdate(Nullable<int> companyID, string name, Nullable<int> accountTypesID, Nullable<long> parentID, Nullable<int> industryID, Nullable<int> rating, Nullable<decimal> annualRevenue, string officePhone, string alternatePhone, string primaryEmail, string alternateEmail, string fax, string website, string ownership, string employees, string sICCode, string billingStreet, string billingCity, string billingState, string billingPost, Nullable<int> billingCountry, string shippingStreet, string shippingCity, string shippingState, string shippingPost, Nullable<int> shippingCountry, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> accountID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountTypesIDParameter = accountTypesID.HasValue ?
                new ObjectParameter("AccountTypesID", accountTypesID) :
                new ObjectParameter("AccountTypesID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var industryIDParameter = industryID.HasValue ?
                new ObjectParameter("IndustryID", industryID) :
                new ObjectParameter("IndustryID", typeof(int));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            var annualRevenueParameter = annualRevenue.HasValue ?
                new ObjectParameter("AnnualRevenue", annualRevenue) :
                new ObjectParameter("AnnualRevenue", typeof(decimal));
    
            var officePhoneParameter = officePhone != null ?
                new ObjectParameter("OfficePhone", officePhone) :
                new ObjectParameter("OfficePhone", typeof(string));
    
            var alternatePhoneParameter = alternatePhone != null ?
                new ObjectParameter("AlternatePhone", alternatePhone) :
                new ObjectParameter("AlternatePhone", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var alternateEmailParameter = alternateEmail != null ?
                new ObjectParameter("AlternateEmail", alternateEmail) :
                new ObjectParameter("AlternateEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var ownershipParameter = ownership != null ?
                new ObjectParameter("Ownership", ownership) :
                new ObjectParameter("Ownership", typeof(string));
    
            var employeesParameter = employees != null ?
                new ObjectParameter("Employees", employees) :
                new ObjectParameter("Employees", typeof(string));
    
            var sICCodeParameter = sICCode != null ?
                new ObjectParameter("SICCode", sICCode) :
                new ObjectParameter("SICCode", typeof(string));
    
            var billingStreetParameter = billingStreet != null ?
                new ObjectParameter("BillingStreet", billingStreet) :
                new ObjectParameter("BillingStreet", typeof(string));
    
            var billingCityParameter = billingCity != null ?
                new ObjectParameter("BillingCity", billingCity) :
                new ObjectParameter("BillingCity", typeof(string));
    
            var billingStateParameter = billingState != null ?
                new ObjectParameter("BillingState", billingState) :
                new ObjectParameter("BillingState", typeof(string));
    
            var billingPostParameter = billingPost != null ?
                new ObjectParameter("BillingPost", billingPost) :
                new ObjectParameter("BillingPost", typeof(string));
    
            var billingCountryParameter = billingCountry.HasValue ?
                new ObjectParameter("BillingCountry", billingCountry) :
                new ObjectParameter("BillingCountry", typeof(int));
    
            var shippingStreetParameter = shippingStreet != null ?
                new ObjectParameter("ShippingStreet", shippingStreet) :
                new ObjectParameter("ShippingStreet", typeof(string));
    
            var shippingCityParameter = shippingCity != null ?
                new ObjectParameter("ShippingCity", shippingCity) :
                new ObjectParameter("ShippingCity", typeof(string));
    
            var shippingStateParameter = shippingState != null ?
                new ObjectParameter("ShippingState", shippingState) :
                new ObjectParameter("ShippingState", typeof(string));
    
            var shippingPostParameter = shippingPost != null ?
                new ObjectParameter("ShippingPost", shippingPost) :
                new ObjectParameter("ShippingPost", typeof(string));
    
            var shippingCountryParameter = shippingCountry.HasValue ?
                new ObjectParameter("ShippingCountry", shippingCountry) :
                new ObjectParameter("ShippingCountry", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAccountUpdate_Result>("uspAccountUpdate", companyIDParameter, nameParameter, accountTypesIDParameter, parentIDParameter, industryIDParameter, ratingParameter, annualRevenueParameter, officePhoneParameter, alternatePhoneParameter, primaryEmailParameter, alternateEmailParameter, faxParameter, websiteParameter, ownershipParameter, employeesParameter, sICCodeParameter, billingStreetParameter, billingCityParameter, billingStateParameter, billingPostParameter, billingCountryParameter, shippingStreetParameter, shippingCityParameter, shippingStateParameter, shippingPostParameter, shippingCountryParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, accountIDParameter);
        }
    
        public virtual ObjectResult<uspContactInsert_Result> uspContactInsert(Nullable<int> companyID, string salutation, string firstName, string middleName, string lastName, Nullable<long> accountID, Nullable<int> leadSourcesID, string department, string designation, Nullable<System.DateTime> birthDate, Nullable<long> reportsTo, string officePhone, string mobilePhone, string homePhone, string otherPhone, string fax, string primaryEmail, string alternateEmail, string assistantName, string assistantPhone, string primaryStreet, string primaryCity, string primaryState, string primaryPostalCode, Nullable<int> primaryCountry, string alternateStreet, string alternateCity, string alternateState, string alternatePostalCode, Nullable<int> alternateCountry, string description, Nullable<long> assignedTo, Nullable<long> teamID, Nullable<bool> invalidEmail, Nullable<bool> emailOptOut, Nullable<bool> doNotCall, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var leadSourcesIDParameter = leadSourcesID.HasValue ?
                new ObjectParameter("LeadSourcesID", leadSourcesID) :
                new ObjectParameter("LeadSourcesID", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var reportsToParameter = reportsTo.HasValue ?
                new ObjectParameter("ReportsTo", reportsTo) :
                new ObjectParameter("ReportsTo", typeof(long));
    
            var officePhoneParameter = officePhone != null ?
                new ObjectParameter("OfficePhone", officePhone) :
                new ObjectParameter("OfficePhone", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var otherPhoneParameter = otherPhone != null ?
                new ObjectParameter("OtherPhone", otherPhone) :
                new ObjectParameter("OtherPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var alternateEmailParameter = alternateEmail != null ?
                new ObjectParameter("AlternateEmail", alternateEmail) :
                new ObjectParameter("AlternateEmail", typeof(string));
    
            var assistantNameParameter = assistantName != null ?
                new ObjectParameter("AssistantName", assistantName) :
                new ObjectParameter("AssistantName", typeof(string));
    
            var assistantPhoneParameter = assistantPhone != null ?
                new ObjectParameter("AssistantPhone", assistantPhone) :
                new ObjectParameter("AssistantPhone", typeof(string));
    
            var primaryStreetParameter = primaryStreet != null ?
                new ObjectParameter("PrimaryStreet", primaryStreet) :
                new ObjectParameter("PrimaryStreet", typeof(string));
    
            var primaryCityParameter = primaryCity != null ?
                new ObjectParameter("PrimaryCity", primaryCity) :
                new ObjectParameter("PrimaryCity", typeof(string));
    
            var primaryStateParameter = primaryState != null ?
                new ObjectParameter("PrimaryState", primaryState) :
                new ObjectParameter("PrimaryState", typeof(string));
    
            var primaryPostalCodeParameter = primaryPostalCode != null ?
                new ObjectParameter("PrimaryPostalCode", primaryPostalCode) :
                new ObjectParameter("PrimaryPostalCode", typeof(string));
    
            var primaryCountryParameter = primaryCountry.HasValue ?
                new ObjectParameter("PrimaryCountry", primaryCountry) :
                new ObjectParameter("PrimaryCountry", typeof(int));
    
            var alternateStreetParameter = alternateStreet != null ?
                new ObjectParameter("AlternateStreet", alternateStreet) :
                new ObjectParameter("AlternateStreet", typeof(string));
    
            var alternateCityParameter = alternateCity != null ?
                new ObjectParameter("AlternateCity", alternateCity) :
                new ObjectParameter("AlternateCity", typeof(string));
    
            var alternateStateParameter = alternateState != null ?
                new ObjectParameter("AlternateState", alternateState) :
                new ObjectParameter("AlternateState", typeof(string));
    
            var alternatePostalCodeParameter = alternatePostalCode != null ?
                new ObjectParameter("AlternatePostalCode", alternatePostalCode) :
                new ObjectParameter("AlternatePostalCode", typeof(string));
    
            var alternateCountryParameter = alternateCountry.HasValue ?
                new ObjectParameter("AlternateCountry", alternateCountry) :
                new ObjectParameter("AlternateCountry", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var invalidEmailParameter = invalidEmail.HasValue ?
                new ObjectParameter("InvalidEmail", invalidEmail) :
                new ObjectParameter("InvalidEmail", typeof(bool));
    
            var emailOptOutParameter = emailOptOut.HasValue ?
                new ObjectParameter("EmailOptOut", emailOptOut) :
                new ObjectParameter("EmailOptOut", typeof(bool));
    
            var doNotCallParameter = doNotCall.HasValue ?
                new ObjectParameter("DoNotCall", doNotCall) :
                new ObjectParameter("DoNotCall", typeof(bool));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspContactInsert_Result>("uspContactInsert", companyIDParameter, salutationParameter, firstNameParameter, middleNameParameter, lastNameParameter, accountIDParameter, leadSourcesIDParameter, departmentParameter, designationParameter, birthDateParameter, reportsToParameter, officePhoneParameter, mobilePhoneParameter, homePhoneParameter, otherPhoneParameter, faxParameter, primaryEmailParameter, alternateEmailParameter, assistantNameParameter, assistantPhoneParameter, primaryStreetParameter, primaryCityParameter, primaryStateParameter, primaryPostalCodeParameter, primaryCountryParameter, alternateStreetParameter, alternateCityParameter, alternateStateParameter, alternatePostalCodeParameter, alternateCountryParameter, descriptionParameter, assignedToParameter, teamIDParameter, invalidEmailParameter, emailOptOutParameter, doNotCallParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspContactUpdate_Result> uspContactUpdate(Nullable<int> companyID, string salutation, string firstName, string middleName, string lastName, Nullable<long> accountID, Nullable<int> leadSourcesID, string department, string designation, Nullable<System.DateTime> birthDate, Nullable<long> reportsTo, string officePhone, string mobilePhone, string homePhone, string otherPhone, string fax, string primaryEmail, string alternateEmail, string assistantName, string assistantPhone, string primaryStreet, string primaryCity, string primaryState, string primaryPostalCode, Nullable<int> primaryCountry, string alternateStreet, string alternateCity, string alternateState, string alternatePostalCode, Nullable<int> alternateCountry, string description, Nullable<long> assignedTo, Nullable<long> teamID, Nullable<bool> invalidEmail, Nullable<bool> emailOptOut, Nullable<bool> doNotCall, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> contactID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var leadSourcesIDParameter = leadSourcesID.HasValue ?
                new ObjectParameter("LeadSourcesID", leadSourcesID) :
                new ObjectParameter("LeadSourcesID", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var reportsToParameter = reportsTo.HasValue ?
                new ObjectParameter("ReportsTo", reportsTo) :
                new ObjectParameter("ReportsTo", typeof(long));
    
            var officePhoneParameter = officePhone != null ?
                new ObjectParameter("OfficePhone", officePhone) :
                new ObjectParameter("OfficePhone", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var otherPhoneParameter = otherPhone != null ?
                new ObjectParameter("OtherPhone", otherPhone) :
                new ObjectParameter("OtherPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var alternateEmailParameter = alternateEmail != null ?
                new ObjectParameter("AlternateEmail", alternateEmail) :
                new ObjectParameter("AlternateEmail", typeof(string));
    
            var assistantNameParameter = assistantName != null ?
                new ObjectParameter("AssistantName", assistantName) :
                new ObjectParameter("AssistantName", typeof(string));
    
            var assistantPhoneParameter = assistantPhone != null ?
                new ObjectParameter("AssistantPhone", assistantPhone) :
                new ObjectParameter("AssistantPhone", typeof(string));
    
            var primaryStreetParameter = primaryStreet != null ?
                new ObjectParameter("PrimaryStreet", primaryStreet) :
                new ObjectParameter("PrimaryStreet", typeof(string));
    
            var primaryCityParameter = primaryCity != null ?
                new ObjectParameter("PrimaryCity", primaryCity) :
                new ObjectParameter("PrimaryCity", typeof(string));
    
            var primaryStateParameter = primaryState != null ?
                new ObjectParameter("PrimaryState", primaryState) :
                new ObjectParameter("PrimaryState", typeof(string));
    
            var primaryPostalCodeParameter = primaryPostalCode != null ?
                new ObjectParameter("PrimaryPostalCode", primaryPostalCode) :
                new ObjectParameter("PrimaryPostalCode", typeof(string));
    
            var primaryCountryParameter = primaryCountry.HasValue ?
                new ObjectParameter("PrimaryCountry", primaryCountry) :
                new ObjectParameter("PrimaryCountry", typeof(int));
    
            var alternateStreetParameter = alternateStreet != null ?
                new ObjectParameter("AlternateStreet", alternateStreet) :
                new ObjectParameter("AlternateStreet", typeof(string));
    
            var alternateCityParameter = alternateCity != null ?
                new ObjectParameter("AlternateCity", alternateCity) :
                new ObjectParameter("AlternateCity", typeof(string));
    
            var alternateStateParameter = alternateState != null ?
                new ObjectParameter("AlternateState", alternateState) :
                new ObjectParameter("AlternateState", typeof(string));
    
            var alternatePostalCodeParameter = alternatePostalCode != null ?
                new ObjectParameter("AlternatePostalCode", alternatePostalCode) :
                new ObjectParameter("AlternatePostalCode", typeof(string));
    
            var alternateCountryParameter = alternateCountry.HasValue ?
                new ObjectParameter("AlternateCountry", alternateCountry) :
                new ObjectParameter("AlternateCountry", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var invalidEmailParameter = invalidEmail.HasValue ?
                new ObjectParameter("InvalidEmail", invalidEmail) :
                new ObjectParameter("InvalidEmail", typeof(bool));
    
            var emailOptOutParameter = emailOptOut.HasValue ?
                new ObjectParameter("EmailOptOut", emailOptOut) :
                new ObjectParameter("EmailOptOut", typeof(bool));
    
            var doNotCallParameter = doNotCall.HasValue ?
                new ObjectParameter("DoNotCall", doNotCall) :
                new ObjectParameter("DoNotCall", typeof(bool));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspContactUpdate_Result>("uspContactUpdate", companyIDParameter, salutationParameter, firstNameParameter, middleNameParameter, lastNameParameter, accountIDParameter, leadSourcesIDParameter, departmentParameter, designationParameter, birthDateParameter, reportsToParameter, officePhoneParameter, mobilePhoneParameter, homePhoneParameter, otherPhoneParameter, faxParameter, primaryEmailParameter, alternateEmailParameter, assistantNameParameter, assistantPhoneParameter, primaryStreetParameter, primaryCityParameter, primaryStateParameter, primaryPostalCodeParameter, primaryCountryParameter, alternateStreetParameter, alternateCityParameter, alternateStateParameter, alternatePostalCodeParameter, alternateCountryParameter, descriptionParameter, assignedToParameter, teamIDParameter, invalidEmailParameter, emailOptOutParameter, doNotCallParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, contactIDParameter);
        }
    
        public virtual ObjectResult<uspDocumentInsert_Result> uspDocumentInsert(Nullable<int> companyID, string name, string filePath, Nullable<System.DateTime> activeDate, Nullable<System.DateTime> expiryDate, Nullable<int> categoryID, Nullable<int> subcategoryID, Nullable<int> statusID, string revision, Nullable<int> templateID, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isTemplate, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activeDateParameter = activeDate.HasValue ?
                new ObjectParameter("ActiveDate", activeDate) :
                new ObjectParameter("ActiveDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var revisionParameter = revision != null ?
                new ObjectParameter("Revision", revision) :
                new ObjectParameter("Revision", typeof(string));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isTemplateParameter = isTemplate.HasValue ?
                new ObjectParameter("IsTemplate", isTemplate) :
                new ObjectParameter("IsTemplate", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDocumentInsert_Result>("uspDocumentInsert", companyIDParameter, nameParameter, filePathParameter, activeDateParameter, expiryDateParameter, categoryIDParameter, subcategoryIDParameter, statusIDParameter, revisionParameter, templateIDParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isTemplateParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspDocumentUpdate_Result> uspDocumentUpdate(Nullable<int> companyID, string name, string filePath, Nullable<System.DateTime> activeDate, Nullable<System.DateTime> expiryDate, Nullable<int> categoryID, Nullable<int> subcategoryID, Nullable<int> statusID, string revision, Nullable<int> templateID, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isTemplate, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> documentID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var activeDateParameter = activeDate.HasValue ?
                new ObjectParameter("ActiveDate", activeDate) :
                new ObjectParameter("ActiveDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("SubcategoryID", subcategoryID) :
                new ObjectParameter("SubcategoryID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var revisionParameter = revision != null ?
                new ObjectParameter("Revision", revision) :
                new ObjectParameter("Revision", typeof(string));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isTemplateParameter = isTemplate.HasValue ?
                new ObjectParameter("IsTemplate", isTemplate) :
                new ObjectParameter("IsTemplate", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDocumentUpdate_Result>("uspDocumentUpdate", companyIDParameter, nameParameter, filePathParameter, activeDateParameter, expiryDateParameter, categoryIDParameter, subcategoryIDParameter, statusIDParameter, revisionParameter, templateIDParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isTemplateParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, documentIDParameter);
        }
    
        public virtual ObjectResult<uspLeadInsert_Result> uspLeadInsert(Nullable<int> companyID, Nullable<long> contactID, string salutation, string firstName, string lastName, Nullable<System.DateTime> birthDate, string title, Nullable<int> leadStatusID, string statusDescription, string department, Nullable<int> leadSourceID, string leadSourceDescripsion, string referredBy, string phoneHome, string phoneMobile, string phoneWork, string phoneOther, string fax, string primaryEmail, string alternateEmail, string primaryStreet, string primaryCity, string primaryState, string primaryPostalCode, Nullable<int> primaryCountry, string alternateStreet, string alternateCity, string alternateState, string alternatePostalCode, Nullable<int> alternateCountry, Nullable<long> accountID, string accountName, string accountDescription, string description, string assistantName, string assistantPhone, string website, Nullable<bool> emailOptOut, Nullable<bool> invalidEmail, Nullable<bool> doNotCall, Nullable<long> teamID, Nullable<int> teamSetID, Nullable<long> reportsToID, Nullable<long> campaignID, Nullable<long> opportunityID, string opportunityName, string opportunityAmount, Nullable<long> assignedUserID, Nullable<bool> converted, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(long));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var leadStatusIDParameter = leadStatusID.HasValue ?
                new ObjectParameter("LeadStatusID", leadStatusID) :
                new ObjectParameter("LeadStatusID", typeof(int));
    
            var statusDescriptionParameter = statusDescription != null ?
                new ObjectParameter("StatusDescription", statusDescription) :
                new ObjectParameter("StatusDescription", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var leadSourceIDParameter = leadSourceID.HasValue ?
                new ObjectParameter("LeadSourceID", leadSourceID) :
                new ObjectParameter("LeadSourceID", typeof(int));
    
            var leadSourceDescripsionParameter = leadSourceDescripsion != null ?
                new ObjectParameter("LeadSourceDescripsion", leadSourceDescripsion) :
                new ObjectParameter("LeadSourceDescripsion", typeof(string));
    
            var referredByParameter = referredBy != null ?
                new ObjectParameter("ReferredBy", referredBy) :
                new ObjectParameter("ReferredBy", typeof(string));
    
            var phoneHomeParameter = phoneHome != null ?
                new ObjectParameter("PhoneHome", phoneHome) :
                new ObjectParameter("PhoneHome", typeof(string));
    
            var phoneMobileParameter = phoneMobile != null ?
                new ObjectParameter("PhoneMobile", phoneMobile) :
                new ObjectParameter("PhoneMobile", typeof(string));
    
            var phoneWorkParameter = phoneWork != null ?
                new ObjectParameter("PhoneWork", phoneWork) :
                new ObjectParameter("PhoneWork", typeof(string));
    
            var phoneOtherParameter = phoneOther != null ?
                new ObjectParameter("PhoneOther", phoneOther) :
                new ObjectParameter("PhoneOther", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var alternateEmailParameter = alternateEmail != null ?
                new ObjectParameter("AlternateEmail", alternateEmail) :
                new ObjectParameter("AlternateEmail", typeof(string));
    
            var primaryStreetParameter = primaryStreet != null ?
                new ObjectParameter("PrimaryStreet", primaryStreet) :
                new ObjectParameter("PrimaryStreet", typeof(string));
    
            var primaryCityParameter = primaryCity != null ?
                new ObjectParameter("PrimaryCity", primaryCity) :
                new ObjectParameter("PrimaryCity", typeof(string));
    
            var primaryStateParameter = primaryState != null ?
                new ObjectParameter("PrimaryState", primaryState) :
                new ObjectParameter("PrimaryState", typeof(string));
    
            var primaryPostalCodeParameter = primaryPostalCode != null ?
                new ObjectParameter("PrimaryPostalCode", primaryPostalCode) :
                new ObjectParameter("PrimaryPostalCode", typeof(string));
    
            var primaryCountryParameter = primaryCountry.HasValue ?
                new ObjectParameter("PrimaryCountry", primaryCountry) :
                new ObjectParameter("PrimaryCountry", typeof(int));
    
            var alternateStreetParameter = alternateStreet != null ?
                new ObjectParameter("AlternateStreet", alternateStreet) :
                new ObjectParameter("AlternateStreet", typeof(string));
    
            var alternateCityParameter = alternateCity != null ?
                new ObjectParameter("AlternateCity", alternateCity) :
                new ObjectParameter("AlternateCity", typeof(string));
    
            var alternateStateParameter = alternateState != null ?
                new ObjectParameter("AlternateState", alternateState) :
                new ObjectParameter("AlternateState", typeof(string));
    
            var alternatePostalCodeParameter = alternatePostalCode != null ?
                new ObjectParameter("AlternatePostalCode", alternatePostalCode) :
                new ObjectParameter("AlternatePostalCode", typeof(string));
    
            var alternateCountryParameter = alternateCountry.HasValue ?
                new ObjectParameter("AlternateCountry", alternateCountry) :
                new ObjectParameter("AlternateCountry", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountDescriptionParameter = accountDescription != null ?
                new ObjectParameter("AccountDescription", accountDescription) :
                new ObjectParameter("AccountDescription", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assistantNameParameter = assistantName != null ?
                new ObjectParameter("AssistantName", assistantName) :
                new ObjectParameter("AssistantName", typeof(string));
    
            var assistantPhoneParameter = assistantPhone != null ?
                new ObjectParameter("AssistantPhone", assistantPhone) :
                new ObjectParameter("AssistantPhone", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var emailOptOutParameter = emailOptOut.HasValue ?
                new ObjectParameter("EmailOptOut", emailOptOut) :
                new ObjectParameter("EmailOptOut", typeof(bool));
    
            var invalidEmailParameter = invalidEmail.HasValue ?
                new ObjectParameter("InvalidEmail", invalidEmail) :
                new ObjectParameter("InvalidEmail", typeof(bool));
    
            var doNotCallParameter = doNotCall.HasValue ?
                new ObjectParameter("DoNotCall", doNotCall) :
                new ObjectParameter("DoNotCall", typeof(bool));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var teamSetIDParameter = teamSetID.HasValue ?
                new ObjectParameter("TeamSetID", teamSetID) :
                new ObjectParameter("TeamSetID", typeof(int));
    
            var reportsToIDParameter = reportsToID.HasValue ?
                new ObjectParameter("ReportsToID", reportsToID) :
                new ObjectParameter("ReportsToID", typeof(long));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(long));
    
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(long));
    
            var opportunityNameParameter = opportunityName != null ?
                new ObjectParameter("OpportunityName", opportunityName) :
                new ObjectParameter("OpportunityName", typeof(string));
    
            var opportunityAmountParameter = opportunityAmount != null ?
                new ObjectParameter("OpportunityAmount", opportunityAmount) :
                new ObjectParameter("OpportunityAmount", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var convertedParameter = converted.HasValue ?
                new ObjectParameter("Converted", converted) :
                new ObjectParameter("Converted", typeof(bool));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLeadInsert_Result>("uspLeadInsert", companyIDParameter, contactIDParameter, salutationParameter, firstNameParameter, lastNameParameter, birthDateParameter, titleParameter, leadStatusIDParameter, statusDescriptionParameter, departmentParameter, leadSourceIDParameter, leadSourceDescripsionParameter, referredByParameter, phoneHomeParameter, phoneMobileParameter, phoneWorkParameter, phoneOtherParameter, faxParameter, primaryEmailParameter, alternateEmailParameter, primaryStreetParameter, primaryCityParameter, primaryStateParameter, primaryPostalCodeParameter, primaryCountryParameter, alternateStreetParameter, alternateCityParameter, alternateStateParameter, alternatePostalCodeParameter, alternateCountryParameter, accountIDParameter, accountNameParameter, accountDescriptionParameter, descriptionParameter, assistantNameParameter, assistantPhoneParameter, websiteParameter, emailOptOutParameter, invalidEmailParameter, doNotCallParameter, teamIDParameter, teamSetIDParameter, reportsToIDParameter, campaignIDParameter, opportunityIDParameter, opportunityNameParameter, opportunityAmountParameter, assignedUserIDParameter, convertedParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspLeadUpdate_Result> uspLeadUpdate(Nullable<int> companyID, Nullable<long> contactID, string salutation, string firstName, string lastName, Nullable<System.DateTime> birthDate, string title, Nullable<int> leadStatusID, string statusDescription, string department, Nullable<int> leadSourceID, string leadSourceDescripsion, string referredBy, string phoneHome, string phoneMobile, string phoneWork, string phoneOther, string fax, string primaryEmail, string alternateEmail, string primaryStreet, string primaryCity, string primaryState, string primaryPostalCode, Nullable<int> primaryCountry, string alternateStreet, string alternateCity, string alternateState, string alternatePostalCode, Nullable<int> alternateCountry, Nullable<long> accountID, string accountName, string accountDescription, string description, string assistantName, string assistantPhone, string website, Nullable<bool> emailOptOut, Nullable<bool> invalidEmail, Nullable<bool> doNotCall, Nullable<long> teamID, Nullable<int> teamSetID, Nullable<long> reportsToID, Nullable<long> campaignID, Nullable<long> opportunityID, string opportunityName, string opportunityAmount, Nullable<long> assignedUserID, Nullable<bool> converted, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> leadID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(long));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var leadStatusIDParameter = leadStatusID.HasValue ?
                new ObjectParameter("LeadStatusID", leadStatusID) :
                new ObjectParameter("LeadStatusID", typeof(int));
    
            var statusDescriptionParameter = statusDescription != null ?
                new ObjectParameter("StatusDescription", statusDescription) :
                new ObjectParameter("StatusDescription", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var leadSourceIDParameter = leadSourceID.HasValue ?
                new ObjectParameter("LeadSourceID", leadSourceID) :
                new ObjectParameter("LeadSourceID", typeof(int));
    
            var leadSourceDescripsionParameter = leadSourceDescripsion != null ?
                new ObjectParameter("LeadSourceDescripsion", leadSourceDescripsion) :
                new ObjectParameter("LeadSourceDescripsion", typeof(string));
    
            var referredByParameter = referredBy != null ?
                new ObjectParameter("ReferredBy", referredBy) :
                new ObjectParameter("ReferredBy", typeof(string));
    
            var phoneHomeParameter = phoneHome != null ?
                new ObjectParameter("PhoneHome", phoneHome) :
                new ObjectParameter("PhoneHome", typeof(string));
    
            var phoneMobileParameter = phoneMobile != null ?
                new ObjectParameter("PhoneMobile", phoneMobile) :
                new ObjectParameter("PhoneMobile", typeof(string));
    
            var phoneWorkParameter = phoneWork != null ?
                new ObjectParameter("PhoneWork", phoneWork) :
                new ObjectParameter("PhoneWork", typeof(string));
    
            var phoneOtherParameter = phoneOther != null ?
                new ObjectParameter("PhoneOther", phoneOther) :
                new ObjectParameter("PhoneOther", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var alternateEmailParameter = alternateEmail != null ?
                new ObjectParameter("AlternateEmail", alternateEmail) :
                new ObjectParameter("AlternateEmail", typeof(string));
    
            var primaryStreetParameter = primaryStreet != null ?
                new ObjectParameter("PrimaryStreet", primaryStreet) :
                new ObjectParameter("PrimaryStreet", typeof(string));
    
            var primaryCityParameter = primaryCity != null ?
                new ObjectParameter("PrimaryCity", primaryCity) :
                new ObjectParameter("PrimaryCity", typeof(string));
    
            var primaryStateParameter = primaryState != null ?
                new ObjectParameter("PrimaryState", primaryState) :
                new ObjectParameter("PrimaryState", typeof(string));
    
            var primaryPostalCodeParameter = primaryPostalCode != null ?
                new ObjectParameter("PrimaryPostalCode", primaryPostalCode) :
                new ObjectParameter("PrimaryPostalCode", typeof(string));
    
            var primaryCountryParameter = primaryCountry.HasValue ?
                new ObjectParameter("PrimaryCountry", primaryCountry) :
                new ObjectParameter("PrimaryCountry", typeof(int));
    
            var alternateStreetParameter = alternateStreet != null ?
                new ObjectParameter("AlternateStreet", alternateStreet) :
                new ObjectParameter("AlternateStreet", typeof(string));
    
            var alternateCityParameter = alternateCity != null ?
                new ObjectParameter("AlternateCity", alternateCity) :
                new ObjectParameter("AlternateCity", typeof(string));
    
            var alternateStateParameter = alternateState != null ?
                new ObjectParameter("AlternateState", alternateState) :
                new ObjectParameter("AlternateState", typeof(string));
    
            var alternatePostalCodeParameter = alternatePostalCode != null ?
                new ObjectParameter("AlternatePostalCode", alternatePostalCode) :
                new ObjectParameter("AlternatePostalCode", typeof(string));
    
            var alternateCountryParameter = alternateCountry.HasValue ?
                new ObjectParameter("AlternateCountry", alternateCountry) :
                new ObjectParameter("AlternateCountry", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountDescriptionParameter = accountDescription != null ?
                new ObjectParameter("AccountDescription", accountDescription) :
                new ObjectParameter("AccountDescription", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assistantNameParameter = assistantName != null ?
                new ObjectParameter("AssistantName", assistantName) :
                new ObjectParameter("AssistantName", typeof(string));
    
            var assistantPhoneParameter = assistantPhone != null ?
                new ObjectParameter("AssistantPhone", assistantPhone) :
                new ObjectParameter("AssistantPhone", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var emailOptOutParameter = emailOptOut.HasValue ?
                new ObjectParameter("EmailOptOut", emailOptOut) :
                new ObjectParameter("EmailOptOut", typeof(bool));
    
            var invalidEmailParameter = invalidEmail.HasValue ?
                new ObjectParameter("InvalidEmail", invalidEmail) :
                new ObjectParameter("InvalidEmail", typeof(bool));
    
            var doNotCallParameter = doNotCall.HasValue ?
                new ObjectParameter("DoNotCall", doNotCall) :
                new ObjectParameter("DoNotCall", typeof(bool));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var teamSetIDParameter = teamSetID.HasValue ?
                new ObjectParameter("TeamSetID", teamSetID) :
                new ObjectParameter("TeamSetID", typeof(int));
    
            var reportsToIDParameter = reportsToID.HasValue ?
                new ObjectParameter("ReportsToID", reportsToID) :
                new ObjectParameter("ReportsToID", typeof(long));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(long));
    
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(long));
    
            var opportunityNameParameter = opportunityName != null ?
                new ObjectParameter("OpportunityName", opportunityName) :
                new ObjectParameter("OpportunityName", typeof(string));
    
            var opportunityAmountParameter = opportunityAmount != null ?
                new ObjectParameter("OpportunityAmount", opportunityAmount) :
                new ObjectParameter("OpportunityAmount", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var convertedParameter = converted.HasValue ?
                new ObjectParameter("Converted", converted) :
                new ObjectParameter("Converted", typeof(bool));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLeadUpdate_Result>("uspLeadUpdate", companyIDParameter, contactIDParameter, salutationParameter, firstNameParameter, lastNameParameter, birthDateParameter, titleParameter, leadStatusIDParameter, statusDescriptionParameter, departmentParameter, leadSourceIDParameter, leadSourceDescripsionParameter, referredByParameter, phoneHomeParameter, phoneMobileParameter, phoneWorkParameter, phoneOtherParameter, faxParameter, primaryEmailParameter, alternateEmailParameter, primaryStreetParameter, primaryCityParameter, primaryStateParameter, primaryPostalCodeParameter, primaryCountryParameter, alternateStreetParameter, alternateCityParameter, alternateStateParameter, alternatePostalCodeParameter, alternateCountryParameter, accountIDParameter, accountNameParameter, accountDescriptionParameter, descriptionParameter, assistantNameParameter, assistantPhoneParameter, websiteParameter, emailOptOutParameter, invalidEmailParameter, doNotCallParameter, teamIDParameter, teamSetIDParameter, reportsToIDParameter, campaignIDParameter, opportunityIDParameter, opportunityNameParameter, opportunityAmountParameter, assignedUserIDParameter, convertedParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, leadIDParameter);
        }
    
        public virtual ObjectResult<uspOpportunityInsert_Result> uspOpportunityInsert(Nullable<int> companyID, string name, Nullable<long> accountID, Nullable<long> contactID, Nullable<int> opportunityTypeID, Nullable<int> leadSourceID, Nullable<long> campaignID, Nullable<int> salesStageID, Nullable<int> currencyID, Nullable<decimal> amount, string nextStep, Nullable<double> probability, Nullable<System.DateTime> dateEnclosed, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(long));
    
            var opportunityTypeIDParameter = opportunityTypeID.HasValue ?
                new ObjectParameter("OpportunityTypeID", opportunityTypeID) :
                new ObjectParameter("OpportunityTypeID", typeof(int));
    
            var leadSourceIDParameter = leadSourceID.HasValue ?
                new ObjectParameter("LeadSourceID", leadSourceID) :
                new ObjectParameter("LeadSourceID", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(long));
    
            var salesStageIDParameter = salesStageID.HasValue ?
                new ObjectParameter("SalesStageID", salesStageID) :
                new ObjectParameter("SalesStageID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var nextStepParameter = nextStep != null ?
                new ObjectParameter("NextStep", nextStep) :
                new ObjectParameter("NextStep", typeof(string));
    
            var probabilityParameter = probability.HasValue ?
                new ObjectParameter("Probability", probability) :
                new ObjectParameter("Probability", typeof(double));
    
            var dateEnclosedParameter = dateEnclosed.HasValue ?
                new ObjectParameter("DateEnclosed", dateEnclosed) :
                new ObjectParameter("DateEnclosed", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOpportunityInsert_Result>("uspOpportunityInsert", companyIDParameter, nameParameter, accountIDParameter, contactIDParameter, opportunityTypeIDParameter, leadSourceIDParameter, campaignIDParameter, salesStageIDParameter, currencyIDParameter, amountParameter, nextStepParameter, probabilityParameter, dateEnclosedParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspOpportunityUpdate_Result> uspOpportunityUpdate(Nullable<int> companyID, string name, Nullable<long> accountID, Nullable<long> contactID, Nullable<int> opportunityTypeID, Nullable<int> leadSourceID, Nullable<long> campaignID, Nullable<int> salesStageID, Nullable<int> currencyID, Nullable<decimal> amount, string nextStep, Nullable<double> probability, Nullable<System.DateTime> dateEnclosed, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> opportunityID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(long));
    
            var opportunityTypeIDParameter = opportunityTypeID.HasValue ?
                new ObjectParameter("OpportunityTypeID", opportunityTypeID) :
                new ObjectParameter("OpportunityTypeID", typeof(int));
    
            var leadSourceIDParameter = leadSourceID.HasValue ?
                new ObjectParameter("LeadSourceID", leadSourceID) :
                new ObjectParameter("LeadSourceID", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(long));
    
            var salesStageIDParameter = salesStageID.HasValue ?
                new ObjectParameter("SalesStageID", salesStageID) :
                new ObjectParameter("SalesStageID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var nextStepParameter = nextStep != null ?
                new ObjectParameter("NextStep", nextStep) :
                new ObjectParameter("NextStep", typeof(string));
    
            var probabilityParameter = probability.HasValue ?
                new ObjectParameter("Probability", probability) :
                new ObjectParameter("Probability", typeof(double));
    
            var dateEnclosedParameter = dateEnclosed.HasValue ?
                new ObjectParameter("DateEnclosed", dateEnclosed) :
                new ObjectParameter("DateEnclosed", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOpportunityUpdate_Result>("uspOpportunityUpdate", companyIDParameter, nameParameter, accountIDParameter, contactIDParameter, opportunityTypeIDParameter, leadSourceIDParameter, campaignIDParameter, salesStageIDParameter, currencyIDParameter, amountParameter, nextStepParameter, probabilityParameter, dateEnclosedParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, opportunityIDParameter);
        }
    
        public virtual ObjectResult<uspProductInsert_Result> uspProductInsert(Nullable<int> companyID, string sKU, string name, Nullable<int> statusID, Nullable<int> categoryID, string website, Nullable<System.DateTime> dateAvailable, Nullable<int> quantity, Nullable<int> manufacturerID, string weight, string color, string location, string mFTPartNumber, string vendorPartNumber, Nullable<int> typeID, Nullable<int> minimumOptions, Nullable<int> maximumOptions, Nullable<decimal> cost, Nullable<decimal> listPrice, Nullable<int> discountID, Nullable<decimal> discountPrice, Nullable<int> pricingFormulaID, string pricingFactor, string supportName, string supportContact, string supportTerm, string supportDescription, string description, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var dateAvailableParameter = dateAvailable.HasValue ?
                new ObjectParameter("DateAvailable", dateAvailable) :
                new ObjectParameter("DateAvailable", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var weightParameter = weight != null ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var mFTPartNumberParameter = mFTPartNumber != null ?
                new ObjectParameter("MFTPartNumber", mFTPartNumber) :
                new ObjectParameter("MFTPartNumber", typeof(string));
    
            var vendorPartNumberParameter = vendorPartNumber != null ?
                new ObjectParameter("VendorPartNumber", vendorPartNumber) :
                new ObjectParameter("VendorPartNumber", typeof(string));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var minimumOptionsParameter = minimumOptions.HasValue ?
                new ObjectParameter("MinimumOptions", minimumOptions) :
                new ObjectParameter("MinimumOptions", typeof(int));
    
            var maximumOptionsParameter = maximumOptions.HasValue ?
                new ObjectParameter("MaximumOptions", maximumOptions) :
                new ObjectParameter("MaximumOptions", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var pricingFormulaIDParameter = pricingFormulaID.HasValue ?
                new ObjectParameter("PricingFormulaID", pricingFormulaID) :
                new ObjectParameter("PricingFormulaID", typeof(int));
    
            var pricingFactorParameter = pricingFactor != null ?
                new ObjectParameter("PricingFactor", pricingFactor) :
                new ObjectParameter("PricingFactor", typeof(string));
    
            var supportNameParameter = supportName != null ?
                new ObjectParameter("SupportName", supportName) :
                new ObjectParameter("SupportName", typeof(string));
    
            var supportContactParameter = supportContact != null ?
                new ObjectParameter("SupportContact", supportContact) :
                new ObjectParameter("SupportContact", typeof(string));
    
            var supportTermParameter = supportTerm != null ?
                new ObjectParameter("SupportTerm", supportTerm) :
                new ObjectParameter("SupportTerm", typeof(string));
    
            var supportDescriptionParameter = supportDescription != null ?
                new ObjectParameter("SupportDescription", supportDescription) :
                new ObjectParameter("SupportDescription", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProductInsert_Result>("uspProductInsert", companyIDParameter, sKUParameter, nameParameter, statusIDParameter, categoryIDParameter, websiteParameter, dateAvailableParameter, quantityParameter, manufacturerIDParameter, weightParameter, colorParameter, locationParameter, mFTPartNumberParameter, vendorPartNumberParameter, typeIDParameter, minimumOptionsParameter, maximumOptionsParameter, costParameter, listPriceParameter, discountIDParameter, discountPriceParameter, pricingFormulaIDParameter, pricingFactorParameter, supportNameParameter, supportContactParameter, supportTermParameter, supportDescriptionParameter, descriptionParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspProductUpdate_Result> uspProductUpdate(Nullable<int> companyID, string sKU, string name, Nullable<int> statusID, Nullable<int> categoryID, string website, Nullable<System.DateTime> dateAvailable, Nullable<int> quantity, Nullable<int> manufacturerID, string weight, string color, string location, string mFTPartNumber, string vendorPartNumber, Nullable<int> typeID, Nullable<int> minimumOptions, Nullable<int> maximumOptions, Nullable<decimal> cost, Nullable<decimal> listPrice, Nullable<int> discountID, Nullable<decimal> discountPrice, Nullable<int> pricingFormulaID, string pricingFactor, string supportName, string supportContact, string supportTerm, string supportDescription, string description, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> productID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var dateAvailableParameter = dateAvailable.HasValue ?
                new ObjectParameter("DateAvailable", dateAvailable) :
                new ObjectParameter("DateAvailable", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("ManufacturerID", manufacturerID) :
                new ObjectParameter("ManufacturerID", typeof(int));
    
            var weightParameter = weight != null ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var mFTPartNumberParameter = mFTPartNumber != null ?
                new ObjectParameter("MFTPartNumber", mFTPartNumber) :
                new ObjectParameter("MFTPartNumber", typeof(string));
    
            var vendorPartNumberParameter = vendorPartNumber != null ?
                new ObjectParameter("VendorPartNumber", vendorPartNumber) :
                new ObjectParameter("VendorPartNumber", typeof(string));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var minimumOptionsParameter = minimumOptions.HasValue ?
                new ObjectParameter("MinimumOptions", minimumOptions) :
                new ObjectParameter("MinimumOptions", typeof(int));
    
            var maximumOptionsParameter = maximumOptions.HasValue ?
                new ObjectParameter("MaximumOptions", maximumOptions) :
                new ObjectParameter("MaximumOptions", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var discountPriceParameter = discountPrice.HasValue ?
                new ObjectParameter("DiscountPrice", discountPrice) :
                new ObjectParameter("DiscountPrice", typeof(decimal));
    
            var pricingFormulaIDParameter = pricingFormulaID.HasValue ?
                new ObjectParameter("PricingFormulaID", pricingFormulaID) :
                new ObjectParameter("PricingFormulaID", typeof(int));
    
            var pricingFactorParameter = pricingFactor != null ?
                new ObjectParameter("PricingFactor", pricingFactor) :
                new ObjectParameter("PricingFactor", typeof(string));
    
            var supportNameParameter = supportName != null ?
                new ObjectParameter("SupportName", supportName) :
                new ObjectParameter("SupportName", typeof(string));
    
            var supportContactParameter = supportContact != null ?
                new ObjectParameter("SupportContact", supportContact) :
                new ObjectParameter("SupportContact", typeof(string));
    
            var supportTermParameter = supportTerm != null ?
                new ObjectParameter("SupportTerm", supportTerm) :
                new ObjectParameter("SupportTerm", typeof(string));
    
            var supportDescriptionParameter = supportDescription != null ?
                new ObjectParameter("SupportDescription", supportDescription) :
                new ObjectParameter("SupportDescription", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProductUpdate_Result>("uspProductUpdate", companyIDParameter, sKUParameter, nameParameter, statusIDParameter, categoryIDParameter, websiteParameter, dateAvailableParameter, quantityParameter, manufacturerIDParameter, weightParameter, colorParameter, locationParameter, mFTPartNumberParameter, vendorPartNumberParameter, typeIDParameter, minimumOptionsParameter, maximumOptionsParameter, costParameter, listPriceParameter, discountIDParameter, discountPriceParameter, pricingFormulaIDParameter, pricingFactorParameter, supportNameParameter, supportContactParameter, supportTermParameter, supportDescriptionParameter, descriptionParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, productIDParameter);
        }
    
        public virtual ObjectResult<uspTeamInsert_Result> uspTeamInsert(Nullable<int> companyID, Nullable<int> teamSetID, string name, string description, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var teamSetIDParameter = teamSetID.HasValue ?
                new ObjectParameter("TeamSetID", teamSetID) :
                new ObjectParameter("TeamSetID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTeamInsert_Result>("uspTeamInsert", companyIDParameter, teamSetIDParameter, nameParameter, descriptionParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspTeamUpdate_Result> uspTeamUpdate(Nullable<int> companyID, Nullable<int> teamSetID, string name, string description, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> teamID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var teamSetIDParameter = teamSetID.HasValue ?
                new ObjectParameter("TeamSetID", teamSetID) :
                new ObjectParameter("TeamSetID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTeamUpdate_Result>("uspTeamUpdate", companyIDParameter, teamSetIDParameter, nameParameter, descriptionParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, teamIDParameter);
        }
    
        public virtual ObjectResult<uspUserInsert_Result> uspUserInsert(Nullable<int> companyID, string userName, string password, Nullable<int> passwordFormat, string passwordSalt, string firstName, string lastName, string gender, Nullable<System.DateTime> birthDate, string designation, string department, Nullable<long> reportsTo, string mobilePhone, string officePhone, string homePhone, string otherPhone, string fax, string primaryEmail, string alternateEmail, string street, string city, string state, string postalCode, Nullable<int> countryID, string messengerType, string messengerID, string facebookID, string nationalID, string drivingLicense, string passportNo, string socialSecurityNo, string image, Nullable<int> roleID, string securityQuestion, string securityAnswer, Nullable<System.Guid> activationID, Nullable<long> teamID, Nullable<int> teamSetID, string globalUserID, string applicationUserID, Nullable<int> recordID, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastPasswordChangedDate, Nullable<System.DateTime> lastLockoutDate, Nullable<int> failedPasswordAttemptCount, Nullable<System.DateTime> failedPasswordAttemptWindowStart, Nullable<int> failedSecurityAnswerCount, Nullable<System.DateTime> failedSecurityAnswerWindowsStart, Nullable<bool> portalOnly, Nullable<bool> isApproved, Nullable<bool> isLockedOut, Nullable<bool> isActive, Nullable<bool> isEmployee, Nullable<bool> isAdmin, Nullable<bool> isAdminDelegate, Nullable<bool> receiveNotifications, Nullable<bool> isFirstLogin, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var reportsToParameter = reportsTo.HasValue ?
                new ObjectParameter("ReportsTo", reportsTo) :
                new ObjectParameter("ReportsTo", typeof(long));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var officePhoneParameter = officePhone != null ?
                new ObjectParameter("OfficePhone", officePhone) :
                new ObjectParameter("OfficePhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var otherPhoneParameter = otherPhone != null ?
                new ObjectParameter("OtherPhone", otherPhone) :
                new ObjectParameter("OtherPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var alternateEmailParameter = alternateEmail != null ?
                new ObjectParameter("AlternateEmail", alternateEmail) :
                new ObjectParameter("AlternateEmail", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var messengerTypeParameter = messengerType != null ?
                new ObjectParameter("MessengerType", messengerType) :
                new ObjectParameter("MessengerType", typeof(string));
    
            var messengerIDParameter = messengerID != null ?
                new ObjectParameter("MessengerID", messengerID) :
                new ObjectParameter("MessengerID", typeof(string));
    
            var facebookIDParameter = facebookID != null ?
                new ObjectParameter("FacebookID", facebookID) :
                new ObjectParameter("FacebookID", typeof(string));
    
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            var drivingLicenseParameter = drivingLicense != null ?
                new ObjectParameter("DrivingLicense", drivingLicense) :
                new ObjectParameter("DrivingLicense", typeof(string));
    
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            var socialSecurityNoParameter = socialSecurityNo != null ?
                new ObjectParameter("SocialSecurityNo", socialSecurityNo) :
                new ObjectParameter("SocialSecurityNo", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var securityQuestionParameter = securityQuestion != null ?
                new ObjectParameter("SecurityQuestion", securityQuestion) :
                new ObjectParameter("SecurityQuestion", typeof(string));
    
            var securityAnswerParameter = securityAnswer != null ?
                new ObjectParameter("SecurityAnswer", securityAnswer) :
                new ObjectParameter("SecurityAnswer", typeof(string));
    
            var activationIDParameter = activationID.HasValue ?
                new ObjectParameter("ActivationID", activationID) :
                new ObjectParameter("ActivationID", typeof(System.Guid));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var teamSetIDParameter = teamSetID.HasValue ?
                new ObjectParameter("TeamSetID", teamSetID) :
                new ObjectParameter("TeamSetID", typeof(int));
    
            var globalUserIDParameter = globalUserID != null ?
                new ObjectParameter("GlobalUserID", globalUserID) :
                new ObjectParameter("GlobalUserID", typeof(string));
    
            var applicationUserIDParameter = applicationUserID != null ?
                new ObjectParameter("ApplicationUserID", applicationUserID) :
                new ObjectParameter("ApplicationUserID", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastPasswordChangedDateParameter = lastPasswordChangedDate.HasValue ?
                new ObjectParameter("LastPasswordChangedDate", lastPasswordChangedDate) :
                new ObjectParameter("LastPasswordChangedDate", typeof(System.DateTime));
    
            var lastLockoutDateParameter = lastLockoutDate.HasValue ?
                new ObjectParameter("LastLockoutDate", lastLockoutDate) :
                new ObjectParameter("LastLockoutDate", typeof(System.DateTime));
    
            var failedPasswordAttemptCountParameter = failedPasswordAttemptCount.HasValue ?
                new ObjectParameter("FailedPasswordAttemptCount", failedPasswordAttemptCount) :
                new ObjectParameter("FailedPasswordAttemptCount", typeof(int));
    
            var failedPasswordAttemptWindowStartParameter = failedPasswordAttemptWindowStart.HasValue ?
                new ObjectParameter("FailedPasswordAttemptWindowStart", failedPasswordAttemptWindowStart) :
                new ObjectParameter("FailedPasswordAttemptWindowStart", typeof(System.DateTime));
    
            var failedSecurityAnswerCountParameter = failedSecurityAnswerCount.HasValue ?
                new ObjectParameter("FailedSecurityAnswerCount", failedSecurityAnswerCount) :
                new ObjectParameter("FailedSecurityAnswerCount", typeof(int));
    
            var failedSecurityAnswerWindowsStartParameter = failedSecurityAnswerWindowsStart.HasValue ?
                new ObjectParameter("FailedSecurityAnswerWindowsStart", failedSecurityAnswerWindowsStart) :
                new ObjectParameter("FailedSecurityAnswerWindowsStart", typeof(System.DateTime));
    
            var portalOnlyParameter = portalOnly.HasValue ?
                new ObjectParameter("PortalOnly", portalOnly) :
                new ObjectParameter("PortalOnly", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isEmployeeParameter = isEmployee.HasValue ?
                new ObjectParameter("IsEmployee", isEmployee) :
                new ObjectParameter("IsEmployee", typeof(bool));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var isAdminDelegateParameter = isAdminDelegate.HasValue ?
                new ObjectParameter("IsAdminDelegate", isAdminDelegate) :
                new ObjectParameter("IsAdminDelegate", typeof(bool));
    
            var receiveNotificationsParameter = receiveNotifications.HasValue ?
                new ObjectParameter("ReceiveNotifications", receiveNotifications) :
                new ObjectParameter("ReceiveNotifications", typeof(bool));
    
            var isFirstLoginParameter = isFirstLogin.HasValue ?
                new ObjectParameter("IsFirstLogin", isFirstLogin) :
                new ObjectParameter("IsFirstLogin", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUserInsert_Result>("uspUserInsert", companyIDParameter, userNameParameter, passwordParameter, passwordFormatParameter, passwordSaltParameter, firstNameParameter, lastNameParameter, genderParameter, birthDateParameter, designationParameter, departmentParameter, reportsToParameter, mobilePhoneParameter, officePhoneParameter, homePhoneParameter, otherPhoneParameter, faxParameter, primaryEmailParameter, alternateEmailParameter, streetParameter, cityParameter, stateParameter, postalCodeParameter, countryIDParameter, messengerTypeParameter, messengerIDParameter, facebookIDParameter, nationalIDParameter, drivingLicenseParameter, passportNoParameter, socialSecurityNoParameter, imageParameter, roleIDParameter, securityQuestionParameter, securityAnswerParameter, activationIDParameter, teamIDParameter, teamSetIDParameter, globalUserIDParameter, applicationUserIDParameter, recordIDParameter, lastLoginDateParameter, lastPasswordChangedDateParameter, lastLockoutDateParameter, failedPasswordAttemptCountParameter, failedPasswordAttemptWindowStartParameter, failedSecurityAnswerCountParameter, failedSecurityAnswerWindowsStartParameter, portalOnlyParameter, isApprovedParameter, isLockedOutParameter, isActiveParameter, isEmployeeParameter, isAdminParameter, isAdminDelegateParameter, receiveNotificationsParameter, isFirstLoginParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspUserUpdate_Result> uspUserUpdate(Nullable<int> companyID, string userName, string password, Nullable<int> passwordFormat, string passwordSalt, string firstName, string lastName, string gender, Nullable<System.DateTime> birthDate, string designation, string department, Nullable<long> reportsTo, string mobilePhone, string officePhone, string homePhone, string otherPhone, string fax, string primaryEmail, string alternateEmail, string street, string city, string state, string postalCode, Nullable<int> countryID, string messengerType, string messengerID, string facebookID, string nationalID, string drivingLicense, string passportNo, string socialSecurityNo, string image, Nullable<int> roleID, string securityQuestion, string securityAnswer, Nullable<System.Guid> activationID, Nullable<long> teamID, Nullable<int> teamSetID, string globalUserID, string applicationUserID, Nullable<int> recordID, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastPasswordChangedDate, Nullable<System.DateTime> lastLockoutDate, Nullable<int> failedPasswordAttemptCount, Nullable<System.DateTime> failedPasswordAttemptWindowStart, Nullable<int> failedSecurityAnswerCount, Nullable<System.DateTime> failedSecurityAnswerWindowsStart, Nullable<bool> portalOnly, Nullable<bool> isApproved, Nullable<bool> isLockedOut, Nullable<bool> isActive, Nullable<bool> isEmployee, Nullable<bool> isAdmin, Nullable<bool> isAdminDelegate, Nullable<bool> receiveNotifications, Nullable<bool> isFirstLogin, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var reportsToParameter = reportsTo.HasValue ?
                new ObjectParameter("ReportsTo", reportsTo) :
                new ObjectParameter("ReportsTo", typeof(long));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var officePhoneParameter = officePhone != null ?
                new ObjectParameter("OfficePhone", officePhone) :
                new ObjectParameter("OfficePhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var otherPhoneParameter = otherPhone != null ?
                new ObjectParameter("OtherPhone", otherPhone) :
                new ObjectParameter("OtherPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var alternateEmailParameter = alternateEmail != null ?
                new ObjectParameter("AlternateEmail", alternateEmail) :
                new ObjectParameter("AlternateEmail", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var messengerTypeParameter = messengerType != null ?
                new ObjectParameter("MessengerType", messengerType) :
                new ObjectParameter("MessengerType", typeof(string));
    
            var messengerIDParameter = messengerID != null ?
                new ObjectParameter("MessengerID", messengerID) :
                new ObjectParameter("MessengerID", typeof(string));
    
            var facebookIDParameter = facebookID != null ?
                new ObjectParameter("FacebookID", facebookID) :
                new ObjectParameter("FacebookID", typeof(string));
    
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            var drivingLicenseParameter = drivingLicense != null ?
                new ObjectParameter("DrivingLicense", drivingLicense) :
                new ObjectParameter("DrivingLicense", typeof(string));
    
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            var socialSecurityNoParameter = socialSecurityNo != null ?
                new ObjectParameter("SocialSecurityNo", socialSecurityNo) :
                new ObjectParameter("SocialSecurityNo", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var securityQuestionParameter = securityQuestion != null ?
                new ObjectParameter("SecurityQuestion", securityQuestion) :
                new ObjectParameter("SecurityQuestion", typeof(string));
    
            var securityAnswerParameter = securityAnswer != null ?
                new ObjectParameter("SecurityAnswer", securityAnswer) :
                new ObjectParameter("SecurityAnswer", typeof(string));
    
            var activationIDParameter = activationID.HasValue ?
                new ObjectParameter("ActivationID", activationID) :
                new ObjectParameter("ActivationID", typeof(System.Guid));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var teamSetIDParameter = teamSetID.HasValue ?
                new ObjectParameter("TeamSetID", teamSetID) :
                new ObjectParameter("TeamSetID", typeof(int));
    
            var globalUserIDParameter = globalUserID != null ?
                new ObjectParameter("GlobalUserID", globalUserID) :
                new ObjectParameter("GlobalUserID", typeof(string));
    
            var applicationUserIDParameter = applicationUserID != null ?
                new ObjectParameter("ApplicationUserID", applicationUserID) :
                new ObjectParameter("ApplicationUserID", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastPasswordChangedDateParameter = lastPasswordChangedDate.HasValue ?
                new ObjectParameter("LastPasswordChangedDate", lastPasswordChangedDate) :
                new ObjectParameter("LastPasswordChangedDate", typeof(System.DateTime));
    
            var lastLockoutDateParameter = lastLockoutDate.HasValue ?
                new ObjectParameter("LastLockoutDate", lastLockoutDate) :
                new ObjectParameter("LastLockoutDate", typeof(System.DateTime));
    
            var failedPasswordAttemptCountParameter = failedPasswordAttemptCount.HasValue ?
                new ObjectParameter("FailedPasswordAttemptCount", failedPasswordAttemptCount) :
                new ObjectParameter("FailedPasswordAttemptCount", typeof(int));
    
            var failedPasswordAttemptWindowStartParameter = failedPasswordAttemptWindowStart.HasValue ?
                new ObjectParameter("FailedPasswordAttemptWindowStart", failedPasswordAttemptWindowStart) :
                new ObjectParameter("FailedPasswordAttemptWindowStart", typeof(System.DateTime));
    
            var failedSecurityAnswerCountParameter = failedSecurityAnswerCount.HasValue ?
                new ObjectParameter("FailedSecurityAnswerCount", failedSecurityAnswerCount) :
                new ObjectParameter("FailedSecurityAnswerCount", typeof(int));
    
            var failedSecurityAnswerWindowsStartParameter = failedSecurityAnswerWindowsStart.HasValue ?
                new ObjectParameter("FailedSecurityAnswerWindowsStart", failedSecurityAnswerWindowsStart) :
                new ObjectParameter("FailedSecurityAnswerWindowsStart", typeof(System.DateTime));
    
            var portalOnlyParameter = portalOnly.HasValue ?
                new ObjectParameter("PortalOnly", portalOnly) :
                new ObjectParameter("PortalOnly", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isEmployeeParameter = isEmployee.HasValue ?
                new ObjectParameter("IsEmployee", isEmployee) :
                new ObjectParameter("IsEmployee", typeof(bool));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var isAdminDelegateParameter = isAdminDelegate.HasValue ?
                new ObjectParameter("IsAdminDelegate", isAdminDelegate) :
                new ObjectParameter("IsAdminDelegate", typeof(bool));
    
            var receiveNotificationsParameter = receiveNotifications.HasValue ?
                new ObjectParameter("ReceiveNotifications", receiveNotifications) :
                new ObjectParameter("ReceiveNotifications", typeof(bool));
    
            var isFirstLoginParameter = isFirstLogin.HasValue ?
                new ObjectParameter("IsFirstLogin", isFirstLogin) :
                new ObjectParameter("IsFirstLogin", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUserUpdate_Result>("uspUserUpdate", companyIDParameter, userNameParameter, passwordParameter, passwordFormatParameter, passwordSaltParameter, firstNameParameter, lastNameParameter, genderParameter, birthDateParameter, designationParameter, departmentParameter, reportsToParameter, mobilePhoneParameter, officePhoneParameter, homePhoneParameter, otherPhoneParameter, faxParameter, primaryEmailParameter, alternateEmailParameter, streetParameter, cityParameter, stateParameter, postalCodeParameter, countryIDParameter, messengerTypeParameter, messengerIDParameter, facebookIDParameter, nationalIDParameter, drivingLicenseParameter, passportNoParameter, socialSecurityNoParameter, imageParameter, roleIDParameter, securityQuestionParameter, securityAnswerParameter, activationIDParameter, teamIDParameter, teamSetIDParameter, globalUserIDParameter, applicationUserIDParameter, recordIDParameter, lastLoginDateParameter, lastPasswordChangedDateParameter, lastLockoutDateParameter, failedPasswordAttemptCountParameter, failedPasswordAttemptWindowStartParameter, failedSecurityAnswerCountParameter, failedSecurityAnswerWindowsStartParameter, portalOnlyParameter, isApprovedParameter, isLockedOutParameter, isActiveParameter, isEmployeeParameter, isAdminParameter, isAdminDelegateParameter, receiveNotificationsParameter, isFirstLoginParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspACLRoleInsert_Result> uspACLRoleInsert(Nullable<int> companyID, string name, string description, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspACLRoleInsert_Result>("uspACLRoleInsert", companyIDParameter, nameParameter, descriptionParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspACLRoleUpdate_Result> uspACLRoleUpdate(Nullable<int> companyID, string name, string description, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<int> roleID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspACLRoleUpdate_Result>("uspACLRoleUpdate", companyIDParameter, nameParameter, descriptionParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<uspCampaignInsert_Result> uspCampaignInsert(Nullable<int> companyID, string name, Nullable<int> campaignTypeID, Nullable<int> campaignStatusID, string referURL, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> budget, Nullable<decimal> actualCost, Nullable<decimal> expectedCost, Nullable<decimal> expectedRevenue, Nullable<int> impressions, string frequency, string objective, string templateType, Nullable<int> templateID, string content, Nullable<int> currencyID, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> teamSetID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var campaignTypeIDParameter = campaignTypeID.HasValue ?
                new ObjectParameter("CampaignTypeID", campaignTypeID) :
                new ObjectParameter("CampaignTypeID", typeof(int));
    
            var campaignStatusIDParameter = campaignStatusID.HasValue ?
                new ObjectParameter("CampaignStatusID", campaignStatusID) :
                new ObjectParameter("CampaignStatusID", typeof(int));
    
            var referURLParameter = referURL != null ?
                new ObjectParameter("ReferURL", referURL) :
                new ObjectParameter("ReferURL", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(decimal));
    
            var actualCostParameter = actualCost.HasValue ?
                new ObjectParameter("ActualCost", actualCost) :
                new ObjectParameter("ActualCost", typeof(decimal));
    
            var expectedCostParameter = expectedCost.HasValue ?
                new ObjectParameter("ExpectedCost", expectedCost) :
                new ObjectParameter("ExpectedCost", typeof(decimal));
    
            var expectedRevenueParameter = expectedRevenue.HasValue ?
                new ObjectParameter("ExpectedRevenue", expectedRevenue) :
                new ObjectParameter("ExpectedRevenue", typeof(decimal));
    
            var impressionsParameter = impressions.HasValue ?
                new ObjectParameter("Impressions", impressions) :
                new ObjectParameter("Impressions", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var objectiveParameter = objective != null ?
                new ObjectParameter("Objective", objective) :
                new ObjectParameter("Objective", typeof(string));
    
            var templateTypeParameter = templateType != null ?
                new ObjectParameter("TemplateType", templateType) :
                new ObjectParameter("TemplateType", typeof(string));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var teamSetIDParameter = teamSetID.HasValue ?
                new ObjectParameter("TeamSetID", teamSetID) :
                new ObjectParameter("TeamSetID", typeof(int));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCampaignInsert_Result>("uspCampaignInsert", companyIDParameter, nameParameter, campaignTypeIDParameter, campaignStatusIDParameter, referURLParameter, startDateParameter, endDateParameter, budgetParameter, actualCostParameter, expectedCostParameter, expectedRevenueParameter, impressionsParameter, frequencyParameter, objectiveParameter, templateTypeParameter, templateIDParameter, contentParameter, currencyIDParameter, assignedUserIDParameter, teamIDParameter, teamSetIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspCampaignUpdate_Result> uspCampaignUpdate(Nullable<int> companyID, string name, Nullable<int> campaignTypeID, Nullable<int> campaignStatusID, string referURL, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> budget, Nullable<decimal> actualCost, Nullable<decimal> expectedCost, Nullable<decimal> expectedRevenue, Nullable<int> impressions, string frequency, string objective, string templateType, Nullable<int> templateID, string content, Nullable<int> currencyID, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> teamSetID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> campaignID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var campaignTypeIDParameter = campaignTypeID.HasValue ?
                new ObjectParameter("CampaignTypeID", campaignTypeID) :
                new ObjectParameter("CampaignTypeID", typeof(int));
    
            var campaignStatusIDParameter = campaignStatusID.HasValue ?
                new ObjectParameter("CampaignStatusID", campaignStatusID) :
                new ObjectParameter("CampaignStatusID", typeof(int));
    
            var referURLParameter = referURL != null ?
                new ObjectParameter("ReferURL", referURL) :
                new ObjectParameter("ReferURL", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(decimal));
    
            var actualCostParameter = actualCost.HasValue ?
                new ObjectParameter("ActualCost", actualCost) :
                new ObjectParameter("ActualCost", typeof(decimal));
    
            var expectedCostParameter = expectedCost.HasValue ?
                new ObjectParameter("ExpectedCost", expectedCost) :
                new ObjectParameter("ExpectedCost", typeof(decimal));
    
            var expectedRevenueParameter = expectedRevenue.HasValue ?
                new ObjectParameter("ExpectedRevenue", expectedRevenue) :
                new ObjectParameter("ExpectedRevenue", typeof(decimal));
    
            var impressionsParameter = impressions.HasValue ?
                new ObjectParameter("Impressions", impressions) :
                new ObjectParameter("Impressions", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var objectiveParameter = objective != null ?
                new ObjectParameter("Objective", objective) :
                new ObjectParameter("Objective", typeof(string));
    
            var templateTypeParameter = templateType != null ?
                new ObjectParameter("TemplateType", templateType) :
                new ObjectParameter("TemplateType", typeof(string));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(int));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var teamSetIDParameter = teamSetID.HasValue ?
                new ObjectParameter("TeamSetID", teamSetID) :
                new ObjectParameter("TeamSetID", typeof(int));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCampaignUpdate_Result>("uspCampaignUpdate", companyIDParameter, nameParameter, campaignTypeIDParameter, campaignStatusIDParameter, referURLParameter, startDateParameter, endDateParameter, budgetParameter, actualCostParameter, expectedCostParameter, expectedRevenueParameter, impressionsParameter, frequencyParameter, objectiveParameter, templateTypeParameter, templateIDParameter, contentParameter, currencyIDParameter, assignedUserIDParameter, teamIDParameter, teamSetIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, campaignIDParameter);
        }
    
        public virtual ObjectResult<uspCaseInsert_Result> uspCaseInsert(Nullable<int> companyID, string caseNumber, string subject, Nullable<long> accountID, string accountName, Nullable<int> statusID, Nullable<int> priority, string type, string description, string resolution, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var caseNumberParameter = caseNumber != null ?
                new ObjectParameter("CaseNumber", caseNumber) :
                new ObjectParameter("CaseNumber", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var resolutionParameter = resolution != null ?
                new ObjectParameter("Resolution", resolution) :
                new ObjectParameter("Resolution", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCaseInsert_Result>("uspCaseInsert", companyIDParameter, caseNumberParameter, subjectParameter, accountIDParameter, accountNameParameter, statusIDParameter, priorityParameter, typeParameter, descriptionParameter, resolutionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspCaseUpdate_Result> uspCaseUpdate(Nullable<int> companyID, string caseNumber, string subject, Nullable<long> accountID, string accountName, Nullable<int> statusID, Nullable<int> priority, string type, string description, string resolution, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> caseID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var caseNumberParameter = caseNumber != null ?
                new ObjectParameter("CaseNumber", caseNumber) :
                new ObjectParameter("CaseNumber", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var resolutionParameter = resolution != null ?
                new ObjectParameter("Resolution", resolution) :
                new ObjectParameter("Resolution", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var caseIDParameter = caseID.HasValue ?
                new ObjectParameter("CaseID", caseID) :
                new ObjectParameter("CaseID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCaseUpdate_Result>("uspCaseUpdate", companyIDParameter, caseNumberParameter, subjectParameter, accountIDParameter, accountNameParameter, statusIDParameter, priorityParameter, typeParameter, descriptionParameter, resolutionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, caseIDParameter);
        }
    
        public virtual ObjectResult<uspCompanyInsert_Result> uspCompanyInsert(string name, string shortName, Nullable<int> businessID, string headOfficeAddress, Nullable<int> companyTypeID, string tin, string tradeNumber, Nullable<System.DateTime> startDate, Nullable<int> bankAccount, string phone, string email, string website, string fax, string address, string city, string state, string postalCode, Nullable<int> countryID, Nullable<int> languageID, Nullable<int> currencyID, Nullable<int> dateFormatID, Nullable<int> timeFormatID, Nullable<int> timeZoneID, Nullable<bool> onTrial, Nullable<System.DateTime> trialStartDate, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var headOfficeAddressParameter = headOfficeAddress != null ?
                new ObjectParameter("HeadOfficeAddress", headOfficeAddress) :
                new ObjectParameter("HeadOfficeAddress", typeof(string));
    
            var companyTypeIDParameter = companyTypeID.HasValue ?
                new ObjectParameter("CompanyTypeID", companyTypeID) :
                new ObjectParameter("CompanyTypeID", typeof(int));
    
            var tinParameter = tin != null ?
                new ObjectParameter("Tin", tin) :
                new ObjectParameter("Tin", typeof(string));
    
            var tradeNumberParameter = tradeNumber != null ?
                new ObjectParameter("TradeNumber", tradeNumber) :
                new ObjectParameter("TradeNumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var dateFormatIDParameter = dateFormatID.HasValue ?
                new ObjectParameter("DateFormatID", dateFormatID) :
                new ObjectParameter("DateFormatID", typeof(int));
    
            var timeFormatIDParameter = timeFormatID.HasValue ?
                new ObjectParameter("TimeFormatID", timeFormatID) :
                new ObjectParameter("TimeFormatID", typeof(int));
    
            var timeZoneIDParameter = timeZoneID.HasValue ?
                new ObjectParameter("TimeZoneID", timeZoneID) :
                new ObjectParameter("TimeZoneID", typeof(int));
    
            var onTrialParameter = onTrial.HasValue ?
                new ObjectParameter("OnTrial", onTrial) :
                new ObjectParameter("OnTrial", typeof(bool));
    
            var trialStartDateParameter = trialStartDate.HasValue ?
                new ObjectParameter("TrialStartDate", trialStartDate) :
                new ObjectParameter("TrialStartDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCompanyInsert_Result>("uspCompanyInsert", nameParameter, shortNameParameter, businessIDParameter, headOfficeAddressParameter, companyTypeIDParameter, tinParameter, tradeNumberParameter, startDateParameter, bankAccountParameter, phoneParameter, emailParameter, websiteParameter, faxParameter, addressParameter, cityParameter, stateParameter, postalCodeParameter, countryIDParameter, languageIDParameter, currencyIDParameter, dateFormatIDParameter, timeFormatIDParameter, timeZoneIDParameter, onTrialParameter, trialStartDateParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspCompanyUpdate_Result> uspCompanyUpdate(string name, string shortName, Nullable<int> businessID, string headOfficeAddress, Nullable<int> companyTypeID, string tin, string tradeNumber, Nullable<System.DateTime> startDate, Nullable<int> bankAccount, string phone, string email, string website, string fax, string address, string city, string state, string postalCode, Nullable<int> countryID, Nullable<int> languageID, Nullable<int> currencyID, Nullable<int> dateFormatID, Nullable<int> timeFormatID, Nullable<int> timeZoneID, Nullable<bool> onTrial, Nullable<System.DateTime> trialStartDate, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<int> companyID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var headOfficeAddressParameter = headOfficeAddress != null ?
                new ObjectParameter("HeadOfficeAddress", headOfficeAddress) :
                new ObjectParameter("HeadOfficeAddress", typeof(string));
    
            var companyTypeIDParameter = companyTypeID.HasValue ?
                new ObjectParameter("CompanyTypeID", companyTypeID) :
                new ObjectParameter("CompanyTypeID", typeof(int));
    
            var tinParameter = tin != null ?
                new ObjectParameter("Tin", tin) :
                new ObjectParameter("Tin", typeof(string));
    
            var tradeNumberParameter = tradeNumber != null ?
                new ObjectParameter("TradeNumber", tradeNumber) :
                new ObjectParameter("TradeNumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var dateFormatIDParameter = dateFormatID.HasValue ?
                new ObjectParameter("DateFormatID", dateFormatID) :
                new ObjectParameter("DateFormatID", typeof(int));
    
            var timeFormatIDParameter = timeFormatID.HasValue ?
                new ObjectParameter("TimeFormatID", timeFormatID) :
                new ObjectParameter("TimeFormatID", typeof(int));
    
            var timeZoneIDParameter = timeZoneID.HasValue ?
                new ObjectParameter("TimeZoneID", timeZoneID) :
                new ObjectParameter("TimeZoneID", typeof(int));
    
            var onTrialParameter = onTrial.HasValue ?
                new ObjectParameter("OnTrial", onTrial) :
                new ObjectParameter("OnTrial", typeof(bool));
    
            var trialStartDateParameter = trialStartDate.HasValue ?
                new ObjectParameter("TrialStartDate", trialStartDate) :
                new ObjectParameter("TrialStartDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCompanyUpdate_Result>("uspCompanyUpdate", nameParameter, shortNameParameter, businessIDParameter, headOfficeAddressParameter, companyTypeIDParameter, tinParameter, tradeNumberParameter, startDateParameter, bankAccountParameter, phoneParameter, emailParameter, websiteParameter, faxParameter, addressParameter, cityParameter, stateParameter, postalCodeParameter, countryIDParameter, languageIDParameter, currencyIDParameter, dateFormatIDParameter, timeFormatIDParameter, timeZoneIDParameter, onTrialParameter, trialStartDateParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<uspEmailInsert_Result> uspEmailInsert(Nullable<int> companyID, Nullable<System.DateTime> dateStart, string subject, string body, string bodyHTML, string fromAddress, string fromName, string toAddress, string bCCAddress, string cCAddress, string attachment, Nullable<bool> status, Nullable<int> emailTemplateID, Nullable<int> emailTypeID, string parentType, Nullable<long> parentID, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<long> notificationID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var bodyHTMLParameter = bodyHTML != null ?
                new ObjectParameter("BodyHTML", bodyHTML) :
                new ObjectParameter("BodyHTML", typeof(string));
    
            var fromAddressParameter = fromAddress != null ?
                new ObjectParameter("FromAddress", fromAddress) :
                new ObjectParameter("FromAddress", typeof(string));
    
            var fromNameParameter = fromName != null ?
                new ObjectParameter("FromName", fromName) :
                new ObjectParameter("FromName", typeof(string));
    
            var toAddressParameter = toAddress != null ?
                new ObjectParameter("ToAddress", toAddress) :
                new ObjectParameter("ToAddress", typeof(string));
    
            var bCCAddressParameter = bCCAddress != null ?
                new ObjectParameter("BCCAddress", bCCAddress) :
                new ObjectParameter("BCCAddress", typeof(string));
    
            var cCAddressParameter = cCAddress != null ?
                new ObjectParameter("CCAddress", cCAddress) :
                new ObjectParameter("CCAddress", typeof(string));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var emailTemplateIDParameter = emailTemplateID.HasValue ?
                new ObjectParameter("EmailTemplateID", emailTemplateID) :
                new ObjectParameter("EmailTemplateID", typeof(int));
    
            var emailTypeIDParameter = emailTypeID.HasValue ?
                new ObjectParameter("EmailTypeID", emailTypeID) :
                new ObjectParameter("EmailTypeID", typeof(int));
    
            var parentTypeParameter = parentType != null ?
                new ObjectParameter("ParentType", parentType) :
                new ObjectParameter("ParentType", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var notificationIDParameter = notificationID.HasValue ?
                new ObjectParameter("NotificationID", notificationID) :
                new ObjectParameter("NotificationID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEmailInsert_Result>("uspEmailInsert", companyIDParameter, dateStartParameter, subjectParameter, bodyParameter, bodyHTMLParameter, fromAddressParameter, fromNameParameter, toAddressParameter, bCCAddressParameter, cCAddressParameter, attachmentParameter, statusParameter, emailTemplateIDParameter, emailTypeIDParameter, parentTypeParameter, parentIDParameter, assignedUserIDParameter, teamIDParameter, notificationIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter);
        }
    
        public virtual ObjectResult<uspEmailTemplateInsert_Result> uspEmailTemplateInsert(Nullable<int> companyID, string name, string description, string subject, string body, string bodyHTML, Nullable<bool> published, Nullable<bool> readOnly, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var bodyHTMLParameter = bodyHTML != null ?
                new ObjectParameter("BodyHTML", bodyHTML) :
                new ObjectParameter("BodyHTML", typeof(string));
    
            var publishedParameter = published.HasValue ?
                new ObjectParameter("Published", published) :
                new ObjectParameter("Published", typeof(bool));
    
            var readOnlyParameter = readOnly.HasValue ?
                new ObjectParameter("ReadOnly", readOnly) :
                new ObjectParameter("ReadOnly", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEmailTemplateInsert_Result>("uspEmailTemplateInsert", companyIDParameter, nameParameter, descriptionParameter, subjectParameter, bodyParameter, bodyHTMLParameter, publishedParameter, readOnlyParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspEmailTemplateUpdate_Result> uspEmailTemplateUpdate(Nullable<int> companyID, string name, string description, string subject, string body, string bodyHTML, Nullable<bool> published, Nullable<bool> readOnly, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<int> emailTemplateID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var bodyHTMLParameter = bodyHTML != null ?
                new ObjectParameter("BodyHTML", bodyHTML) :
                new ObjectParameter("BodyHTML", typeof(string));
    
            var publishedParameter = published.HasValue ?
                new ObjectParameter("Published", published) :
                new ObjectParameter("Published", typeof(bool));
    
            var readOnlyParameter = readOnly.HasValue ?
                new ObjectParameter("ReadOnly", readOnly) :
                new ObjectParameter("ReadOnly", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var emailTemplateIDParameter = emailTemplateID.HasValue ?
                new ObjectParameter("EmailTemplateID", emailTemplateID) :
                new ObjectParameter("EmailTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEmailTemplateUpdate_Result>("uspEmailTemplateUpdate", companyIDParameter, nameParameter, descriptionParameter, subjectParameter, bodyParameter, bodyHTMLParameter, publishedParameter, readOnlyParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, emailTemplateIDParameter);
        }
    
        public virtual ObjectResult<uspInvoiceInsert_Result> uspInvoiceInsert(Nullable<int> companyID, string name, Nullable<long> opportunityID, string invoiceNumber, Nullable<int> invoiceStageID, Nullable<long> orderID, Nullable<decimal> amountDue, string purchaseOrderNum, Nullable<System.DateTime> dueDate, Nullable<int> paymentTermID, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(long));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceStageIDParameter = invoiceStageID.HasValue ?
                new ObjectParameter("InvoiceStageID", invoiceStageID) :
                new ObjectParameter("InvoiceStageID", typeof(int));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(long));
    
            var amountDueParameter = amountDue.HasValue ?
                new ObjectParameter("AmountDue", amountDue) :
                new ObjectParameter("AmountDue", typeof(decimal));
    
            var purchaseOrderNumParameter = purchaseOrderNum != null ?
                new ObjectParameter("PurchaseOrderNum", purchaseOrderNum) :
                new ObjectParameter("PurchaseOrderNum", typeof(string));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var paymentTermIDParameter = paymentTermID.HasValue ?
                new ObjectParameter("PaymentTermID", paymentTermID) :
                new ObjectParameter("PaymentTermID", typeof(int));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInvoiceInsert_Result>("uspInvoiceInsert", companyIDParameter, nameParameter, opportunityIDParameter, invoiceNumberParameter, invoiceStageIDParameter, orderIDParameter, amountDueParameter, purchaseOrderNumParameter, dueDateParameter, paymentTermIDParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspMeetingInsert_Result> uspMeetingInsert(Nullable<int> companyID, string subject, string location, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> durationHours, Nullable<int> durationMinutes, Nullable<int> statusID, Nullable<int> reminderTime, string parentType, Nullable<long> parentID, Nullable<long> assignedUserID, Nullable<long> teamID, string description, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var durationHoursParameter = durationHours.HasValue ?
                new ObjectParameter("DurationHours", durationHours) :
                new ObjectParameter("DurationHours", typeof(int));
    
            var durationMinutesParameter = durationMinutes.HasValue ?
                new ObjectParameter("DurationMinutes", durationMinutes) :
                new ObjectParameter("DurationMinutes", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var reminderTimeParameter = reminderTime.HasValue ?
                new ObjectParameter("ReminderTime", reminderTime) :
                new ObjectParameter("ReminderTime", typeof(int));
    
            var parentTypeParameter = parentType != null ?
                new ObjectParameter("ParentType", parentType) :
                new ObjectParameter("ParentType", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMeetingInsert_Result>("uspMeetingInsert", companyIDParameter, subjectParameter, locationParameter, startDateParameter, endDateParameter, durationHoursParameter, durationMinutesParameter, statusIDParameter, reminderTimeParameter, parentTypeParameter, parentIDParameter, assignedUserIDParameter, teamIDParameter, descriptionParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspMeetingUpdate_Result> uspMeetingUpdate(Nullable<int> companyID, string subject, string location, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> durationHours, Nullable<int> durationMinutes, Nullable<int> statusID, Nullable<int> reminderTime, string parentType, Nullable<long> parentID, Nullable<long> assignedUserID, Nullable<long> teamID, string description, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> meetingID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var durationHoursParameter = durationHours.HasValue ?
                new ObjectParameter("DurationHours", durationHours) :
                new ObjectParameter("DurationHours", typeof(int));
    
            var durationMinutesParameter = durationMinutes.HasValue ?
                new ObjectParameter("DurationMinutes", durationMinutes) :
                new ObjectParameter("DurationMinutes", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var reminderTimeParameter = reminderTime.HasValue ?
                new ObjectParameter("ReminderTime", reminderTime) :
                new ObjectParameter("ReminderTime", typeof(int));
    
            var parentTypeParameter = parentType != null ?
                new ObjectParameter("ParentType", parentType) :
                new ObjectParameter("ParentType", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var meetingIDParameter = meetingID.HasValue ?
                new ObjectParameter("MeetingID", meetingID) :
                new ObjectParameter("MeetingID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMeetingUpdate_Result>("uspMeetingUpdate", companyIDParameter, subjectParameter, locationParameter, startDateParameter, endDateParameter, durationHoursParameter, durationMinutesParameter, statusIDParameter, reminderTimeParameter, parentTypeParameter, parentIDParameter, assignedUserIDParameter, teamIDParameter, descriptionParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, meetingIDParameter);
        }
    
        public virtual ObjectResult<uspNotificationInsert_Result> uspNotificationInsert(Nullable<int> companyID, Nullable<int> notificationTypeID, Nullable<int> status, string parentType, Nullable<long> parentID, Nullable<long> createdBy, Nullable<System.DateTime> createdTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var notificationTypeIDParameter = notificationTypeID.HasValue ?
                new ObjectParameter("NotificationTypeID", notificationTypeID) :
                new ObjectParameter("NotificationTypeID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var parentTypeParameter = parentType != null ?
                new ObjectParameter("ParentType", parentType) :
                new ObjectParameter("ParentType", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspNotificationInsert_Result>("uspNotificationInsert", companyIDParameter, notificationTypeIDParameter, statusParameter, parentTypeParameter, parentIDParameter, createdByParameter, createdTimeParameter);
        }
    
        public virtual ObjectResult<uspOrderDetailsInsert_Result> uspOrderDetailsInsert(Nullable<long> orderID, Nullable<long> productID, Nullable<int> quantity, Nullable<decimal> cost, Nullable<decimal> listPrice, Nullable<decimal> discount, string note, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(long));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOrderDetailsInsert_Result>("uspOrderDetailsInsert", orderIDParameter, productIDParameter, quantityParameter, costParameter, listPriceParameter, discountParameter, noteParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspOrderDetailsUpdate_Result> uspOrderDetailsUpdate(Nullable<long> orderID, Nullable<long> productID, Nullable<int> quantity, Nullable<decimal> cost, Nullable<decimal> listPrice, Nullable<decimal> discount, string note, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> orderLineID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(long));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(long));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var orderLineIDParameter = orderLineID.HasValue ?
                new ObjectParameter("OrderLineID", orderLineID) :
                new ObjectParameter("OrderLineID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOrderDetailsUpdate_Result>("uspOrderDetailsUpdate", orderIDParameter, productIDParameter, quantityParameter, costParameter, listPriceParameter, discountParameter, noteParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, orderLineIDParameter);
        }
    
        public virtual ObjectResult<uspOrderInsert_Result> uspOrderInsert(Nullable<int> companyID, string name, Nullable<long> opportunityID, string orderNumber, Nullable<int> orderStageID, Nullable<decimal> purchaseOrderNumber, Nullable<int> paymentTermID, Nullable<System.DateTime> orderDueDate, Nullable<System.DateTime> orderShippedDate, Nullable<long> billingAccountID, Nullable<long> billingContactID, string billingStreet, string billingCity, string billingState, string billingZip, Nullable<int> billingCountry, Nullable<long> shippingAccountID, Nullable<long> shippingContactID, string shippingStreet, string shippingCity, string shippingState, string shippingZip, Nullable<int> shippingCountry, Nullable<int> currencyID, Nullable<decimal> conversionRate, Nullable<decimal> taxRate, string shipper, Nullable<decimal> subtotal, Nullable<decimal> discount, Nullable<decimal> shipping, Nullable<decimal> tax, Nullable<decimal> total, Nullable<bool> isApproved, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<bool> converted, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(long));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(string));
    
            var orderStageIDParameter = orderStageID.HasValue ?
                new ObjectParameter("OrderStageID", orderStageID) :
                new ObjectParameter("OrderStageID", typeof(int));
    
            var purchaseOrderNumberParameter = purchaseOrderNumber.HasValue ?
                new ObjectParameter("PurchaseOrderNumber", purchaseOrderNumber) :
                new ObjectParameter("PurchaseOrderNumber", typeof(decimal));
    
            var paymentTermIDParameter = paymentTermID.HasValue ?
                new ObjectParameter("PaymentTermID", paymentTermID) :
                new ObjectParameter("PaymentTermID", typeof(int));
    
            var orderDueDateParameter = orderDueDate.HasValue ?
                new ObjectParameter("OrderDueDate", orderDueDate) :
                new ObjectParameter("OrderDueDate", typeof(System.DateTime));
    
            var orderShippedDateParameter = orderShippedDate.HasValue ?
                new ObjectParameter("OrderShippedDate", orderShippedDate) :
                new ObjectParameter("OrderShippedDate", typeof(System.DateTime));
    
            var billingAccountIDParameter = billingAccountID.HasValue ?
                new ObjectParameter("BillingAccountID", billingAccountID) :
                new ObjectParameter("BillingAccountID", typeof(long));
    
            var billingContactIDParameter = billingContactID.HasValue ?
                new ObjectParameter("BillingContactID", billingContactID) :
                new ObjectParameter("BillingContactID", typeof(long));
    
            var billingStreetParameter = billingStreet != null ?
                new ObjectParameter("BillingStreet", billingStreet) :
                new ObjectParameter("BillingStreet", typeof(string));
    
            var billingCityParameter = billingCity != null ?
                new ObjectParameter("BillingCity", billingCity) :
                new ObjectParameter("BillingCity", typeof(string));
    
            var billingStateParameter = billingState != null ?
                new ObjectParameter("BillingState", billingState) :
                new ObjectParameter("BillingState", typeof(string));
    
            var billingZipParameter = billingZip != null ?
                new ObjectParameter("BillingZip", billingZip) :
                new ObjectParameter("BillingZip", typeof(string));
    
            var billingCountryParameter = billingCountry.HasValue ?
                new ObjectParameter("BillingCountry", billingCountry) :
                new ObjectParameter("BillingCountry", typeof(int));
    
            var shippingAccountIDParameter = shippingAccountID.HasValue ?
                new ObjectParameter("ShippingAccountID", shippingAccountID) :
                new ObjectParameter("ShippingAccountID", typeof(long));
    
            var shippingContactIDParameter = shippingContactID.HasValue ?
                new ObjectParameter("ShippingContactID", shippingContactID) :
                new ObjectParameter("ShippingContactID", typeof(long));
    
            var shippingStreetParameter = shippingStreet != null ?
                new ObjectParameter("ShippingStreet", shippingStreet) :
                new ObjectParameter("ShippingStreet", typeof(string));
    
            var shippingCityParameter = shippingCity != null ?
                new ObjectParameter("ShippingCity", shippingCity) :
                new ObjectParameter("ShippingCity", typeof(string));
    
            var shippingStateParameter = shippingState != null ?
                new ObjectParameter("ShippingState", shippingState) :
                new ObjectParameter("ShippingState", typeof(string));
    
            var shippingZipParameter = shippingZip != null ?
                new ObjectParameter("ShippingZip", shippingZip) :
                new ObjectParameter("ShippingZip", typeof(string));
    
            var shippingCountryParameter = shippingCountry.HasValue ?
                new ObjectParameter("ShippingCountry", shippingCountry) :
                new ObjectParameter("ShippingCountry", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var conversionRateParameter = conversionRate.HasValue ?
                new ObjectParameter("ConversionRate", conversionRate) :
                new ObjectParameter("ConversionRate", typeof(decimal));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var shipperParameter = shipper != null ?
                new ObjectParameter("Shipper", shipper) :
                new ObjectParameter("Shipper", typeof(string));
    
            var subtotalParameter = subtotal.HasValue ?
                new ObjectParameter("Subtotal", subtotal) :
                new ObjectParameter("Subtotal", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var shippingParameter = shipping.HasValue ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var convertedParameter = converted.HasValue ?
                new ObjectParameter("Converted", converted) :
                new ObjectParameter("Converted", typeof(bool));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOrderInsert_Result>("uspOrderInsert", companyIDParameter, nameParameter, opportunityIDParameter, orderNumberParameter, orderStageIDParameter, purchaseOrderNumberParameter, paymentTermIDParameter, orderDueDateParameter, orderShippedDateParameter, billingAccountIDParameter, billingContactIDParameter, billingStreetParameter, billingCityParameter, billingStateParameter, billingZipParameter, billingCountryParameter, shippingAccountIDParameter, shippingContactIDParameter, shippingStreetParameter, shippingCityParameter, shippingStateParameter, shippingZipParameter, shippingCountryParameter, currencyIDParameter, conversionRateParameter, taxRateParameter, shipperParameter, subtotalParameter, discountParameter, shippingParameter, taxParameter, totalParameter, isApprovedParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, convertedParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspOrderUpdate_Result> uspOrderUpdate(Nullable<int> companyID, string name, Nullable<long> opportunityID, string orderNumber, Nullable<int> orderStageID, Nullable<decimal> purchaseOrderNumber, Nullable<int> paymentTermID, Nullable<System.DateTime> orderDueDate, Nullable<System.DateTime> orderShippedDate, Nullable<long> billingAccountID, Nullable<long> billingContactID, string billingStreet, string billingCity, string billingState, string billingZip, Nullable<int> billingCountry, Nullable<long> shippingAccountID, Nullable<long> shippingContactID, string shippingStreet, string shippingCity, string shippingState, string shippingZip, Nullable<int> shippingCountry, Nullable<int> currencyID, Nullable<decimal> conversionRate, Nullable<decimal> taxRate, string shipper, Nullable<decimal> subtotal, Nullable<decimal> discount, Nullable<decimal> shipping, Nullable<decimal> tax, Nullable<decimal> total, Nullable<bool> isApproved, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<bool> converted, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> orderID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(long));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(string));
    
            var orderStageIDParameter = orderStageID.HasValue ?
                new ObjectParameter("OrderStageID", orderStageID) :
                new ObjectParameter("OrderStageID", typeof(int));
    
            var purchaseOrderNumberParameter = purchaseOrderNumber.HasValue ?
                new ObjectParameter("PurchaseOrderNumber", purchaseOrderNumber) :
                new ObjectParameter("PurchaseOrderNumber", typeof(decimal));
    
            var paymentTermIDParameter = paymentTermID.HasValue ?
                new ObjectParameter("PaymentTermID", paymentTermID) :
                new ObjectParameter("PaymentTermID", typeof(int));
    
            var orderDueDateParameter = orderDueDate.HasValue ?
                new ObjectParameter("OrderDueDate", orderDueDate) :
                new ObjectParameter("OrderDueDate", typeof(System.DateTime));
    
            var orderShippedDateParameter = orderShippedDate.HasValue ?
                new ObjectParameter("OrderShippedDate", orderShippedDate) :
                new ObjectParameter("OrderShippedDate", typeof(System.DateTime));
    
            var billingAccountIDParameter = billingAccountID.HasValue ?
                new ObjectParameter("BillingAccountID", billingAccountID) :
                new ObjectParameter("BillingAccountID", typeof(long));
    
            var billingContactIDParameter = billingContactID.HasValue ?
                new ObjectParameter("BillingContactID", billingContactID) :
                new ObjectParameter("BillingContactID", typeof(long));
    
            var billingStreetParameter = billingStreet != null ?
                new ObjectParameter("BillingStreet", billingStreet) :
                new ObjectParameter("BillingStreet", typeof(string));
    
            var billingCityParameter = billingCity != null ?
                new ObjectParameter("BillingCity", billingCity) :
                new ObjectParameter("BillingCity", typeof(string));
    
            var billingStateParameter = billingState != null ?
                new ObjectParameter("BillingState", billingState) :
                new ObjectParameter("BillingState", typeof(string));
    
            var billingZipParameter = billingZip != null ?
                new ObjectParameter("BillingZip", billingZip) :
                new ObjectParameter("BillingZip", typeof(string));
    
            var billingCountryParameter = billingCountry.HasValue ?
                new ObjectParameter("BillingCountry", billingCountry) :
                new ObjectParameter("BillingCountry", typeof(int));
    
            var shippingAccountIDParameter = shippingAccountID.HasValue ?
                new ObjectParameter("ShippingAccountID", shippingAccountID) :
                new ObjectParameter("ShippingAccountID", typeof(long));
    
            var shippingContactIDParameter = shippingContactID.HasValue ?
                new ObjectParameter("ShippingContactID", shippingContactID) :
                new ObjectParameter("ShippingContactID", typeof(long));
    
            var shippingStreetParameter = shippingStreet != null ?
                new ObjectParameter("ShippingStreet", shippingStreet) :
                new ObjectParameter("ShippingStreet", typeof(string));
    
            var shippingCityParameter = shippingCity != null ?
                new ObjectParameter("ShippingCity", shippingCity) :
                new ObjectParameter("ShippingCity", typeof(string));
    
            var shippingStateParameter = shippingState != null ?
                new ObjectParameter("ShippingState", shippingState) :
                new ObjectParameter("ShippingState", typeof(string));
    
            var shippingZipParameter = shippingZip != null ?
                new ObjectParameter("ShippingZip", shippingZip) :
                new ObjectParameter("ShippingZip", typeof(string));
    
            var shippingCountryParameter = shippingCountry.HasValue ?
                new ObjectParameter("ShippingCountry", shippingCountry) :
                new ObjectParameter("ShippingCountry", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var conversionRateParameter = conversionRate.HasValue ?
                new ObjectParameter("ConversionRate", conversionRate) :
                new ObjectParameter("ConversionRate", typeof(decimal));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var shipperParameter = shipper != null ?
                new ObjectParameter("Shipper", shipper) :
                new ObjectParameter("Shipper", typeof(string));
    
            var subtotalParameter = subtotal.HasValue ?
                new ObjectParameter("Subtotal", subtotal) :
                new ObjectParameter("Subtotal", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var shippingParameter = shipping.HasValue ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var convertedParameter = converted.HasValue ?
                new ObjectParameter("Converted", converted) :
                new ObjectParameter("Converted", typeof(bool));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOrderUpdate_Result>("uspOrderUpdate", companyIDParameter, nameParameter, opportunityIDParameter, orderNumberParameter, orderStageIDParameter, purchaseOrderNumberParameter, paymentTermIDParameter, orderDueDateParameter, orderShippedDateParameter, billingAccountIDParameter, billingContactIDParameter, billingStreetParameter, billingCityParameter, billingStateParameter, billingZipParameter, billingCountryParameter, shippingAccountIDParameter, shippingContactIDParameter, shippingStreetParameter, shippingCityParameter, shippingStateParameter, shippingZipParameter, shippingCountryParameter, currencyIDParameter, conversionRateParameter, taxRateParameter, shipperParameter, subtotalParameter, discountParameter, shippingParameter, taxParameter, totalParameter, isApprovedParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, convertedParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, orderIDParameter);
        }
    
        public virtual ObjectResult<uspReportInsert_Result> uspReportInsert(Nullable<int> companyID, string name, Nullable<int> moduleID, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspReportInsert_Result>("uspReportInsert", companyIDParameter, nameParameter, moduleIDParameter, assignedUserIDParameter, teamIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspReportUpdate_Result> uspReportUpdate(Nullable<int> companyID, string name, Nullable<int> moduleID, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> reportID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspReportUpdate_Result>("uspReportUpdate", companyIDParameter, nameParameter, moduleIDParameter, assignedUserIDParameter, teamIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, reportIDParameter);
        }
    
        public virtual ObjectResult<uspShortMessageInsert_Result> uspShortMessageInsert(Nullable<int> companyID, string fromNumber, string toNumber, string body, string type, Nullable<int> status, string parentType, Nullable<long> parentID, Nullable<long> notificationID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromNumberParameter = fromNumber != null ?
                new ObjectParameter("FromNumber", fromNumber) :
                new ObjectParameter("FromNumber", typeof(string));
    
            var toNumberParameter = toNumber != null ?
                new ObjectParameter("ToNumber", toNumber) :
                new ObjectParameter("ToNumber", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var parentTypeParameter = parentType != null ?
                new ObjectParameter("ParentType", parentType) :
                new ObjectParameter("ParentType", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var notificationIDParameter = notificationID.HasValue ?
                new ObjectParameter("NotificationID", notificationID) :
                new ObjectParameter("NotificationID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspShortMessageInsert_Result>("uspShortMessageInsert", companyIDParameter, fromNumberParameter, toNumberParameter, bodyParameter, typeParameter, statusParameter, parentTypeParameter, parentIDParameter, notificationIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter);
        }
    
        public virtual ObjectResult<uspShortMessageTemplateInsert_Result> uspShortMessageTemplateInsert(Nullable<int> companyID, string name, string description, string subject, string message, Nullable<bool> published, Nullable<bool> readOnly, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var publishedParameter = published.HasValue ?
                new ObjectParameter("Published", published) :
                new ObjectParameter("Published", typeof(bool));
    
            var readOnlyParameter = readOnly.HasValue ?
                new ObjectParameter("ReadOnly", readOnly) :
                new ObjectParameter("ReadOnly", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspShortMessageTemplateInsert_Result>("uspShortMessageTemplateInsert", companyIDParameter, nameParameter, descriptionParameter, subjectParameter, messageParameter, publishedParameter, readOnlyParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspShortMessageTemplateUpdate_Result> uspShortMessageTemplateUpdate(Nullable<int> companyID, string name, string description, string subject, string message, Nullable<bool> published, Nullable<bool> readOnly, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<int> shortMessageTemplateID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var publishedParameter = published.HasValue ?
                new ObjectParameter("Published", published) :
                new ObjectParameter("Published", typeof(bool));
    
            var readOnlyParameter = readOnly.HasValue ?
                new ObjectParameter("ReadOnly", readOnly) :
                new ObjectParameter("ReadOnly", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var shortMessageTemplateIDParameter = shortMessageTemplateID.HasValue ?
                new ObjectParameter("ShortMessageTemplateID", shortMessageTemplateID) :
                new ObjectParameter("ShortMessageTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspShortMessageTemplateUpdate_Result>("uspShortMessageTemplateUpdate", companyIDParameter, nameParameter, descriptionParameter, subjectParameter, messageParameter, publishedParameter, readOnlyParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, shortMessageTemplateIDParameter);
        }
    
        public virtual ObjectResult<uspTaskInsert_Result> uspTaskInsert(Nullable<int> companyID, string subject, Nullable<int> statusID, string priority, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> startDate, string parentType, Nullable<long> parentID, Nullable<long> contactID, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var parentTypeParameter = parentType != null ?
                new ObjectParameter("ParentType", parentType) :
                new ObjectParameter("ParentType", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTaskInsert_Result>("uspTaskInsert", companyIDParameter, subjectParameter, statusIDParameter, priorityParameter, dueDateParameter, startDateParameter, parentTypeParameter, parentIDParameter, contactIDParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspTaskUpdate_Result> uspTaskUpdate(Nullable<int> companyID, string subject, Nullable<int> statusID, string priority, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> startDate, string parentType, Nullable<long> parentID, Nullable<long> contactID, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> taskID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var parentTypeParameter = parentType != null ?
                new ObjectParameter("ParentType", parentType) :
                new ObjectParameter("ParentType", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTaskUpdate_Result>("uspTaskUpdate", companyIDParameter, subjectParameter, statusIDParameter, priorityParameter, dueDateParameter, startDateParameter, parentTypeParameter, parentIDParameter, contactIDParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, taskIDParameter);
        }
    
        public virtual ObjectResult<uspCallInsert_Result> uspCallInsert(Nullable<int> companyID, string subject, string status, Nullable<int> durationHours, Nullable<int> durationMinutes, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<int> reminderTime, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var durationHoursParameter = durationHours.HasValue ?
                new ObjectParameter("DurationHours", durationHours) :
                new ObjectParameter("DurationHours", typeof(int));
    
            var durationMinutesParameter = durationMinutes.HasValue ?
                new ObjectParameter("DurationMinutes", durationMinutes) :
                new ObjectParameter("DurationMinutes", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var reminderTimeParameter = reminderTime.HasValue ?
                new ObjectParameter("ReminderTime", reminderTime) :
                new ObjectParameter("ReminderTime", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCallInsert_Result>("uspCallInsert", companyIDParameter, subjectParameter, statusParameter, durationHoursParameter, durationMinutesParameter, dateStartParameter, dateEndParameter, reminderTimeParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter);
        }
    
        public virtual ObjectResult<uspCallUpdate_Result> uspCallUpdate(Nullable<int> companyID, string subject, string status, Nullable<int> durationHours, Nullable<int> durationMinutes, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<int> reminderTime, string description, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> callID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var durationHoursParameter = durationHours.HasValue ?
                new ObjectParameter("DurationHours", durationHours) :
                new ObjectParameter("DurationHours", typeof(int));
    
            var durationMinutesParameter = durationMinutes.HasValue ?
                new ObjectParameter("DurationMinutes", durationMinutes) :
                new ObjectParameter("DurationMinutes", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var reminderTimeParameter = reminderTime.HasValue ?
                new ObjectParameter("ReminderTime", reminderTime) :
                new ObjectParameter("ReminderTime", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var callIDParameter = callID.HasValue ?
                new ObjectParameter("CallID", callID) :
                new ObjectParameter("CallID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCallUpdate_Result>("uspCallUpdate", companyIDParameter, subjectParameter, statusParameter, durationHoursParameter, durationMinutesParameter, dateStartParameter, dateEndParameter, reminderTimeParameter, descriptionParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, callIDParameter);
        }
    
        public virtual ObjectResult<uspInvoiceUpdate_Result> uspInvoiceUpdate(Nullable<int> companyID, string name, Nullable<long> opportunityID, string invoiceNumber, Nullable<int> invoiceStageID, Nullable<long> orderID, Nullable<decimal> amountDue, string purchaseOrderNum, Nullable<System.DateTime> dueDate, Nullable<int> paymentTermID, Nullable<long> assignedUserID, Nullable<long> teamID, Nullable<int> recordID, Nullable<bool> isDeleted, Nullable<long> createdBy, Nullable<System.DateTime> createdTime, Nullable<long> modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<long> invoiceID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(long));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceStageIDParameter = invoiceStageID.HasValue ?
                new ObjectParameter("InvoiceStageID", invoiceStageID) :
                new ObjectParameter("InvoiceStageID", typeof(int));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(long));
    
            var amountDueParameter = amountDue.HasValue ?
                new ObjectParameter("AmountDue", amountDue) :
                new ObjectParameter("AmountDue", typeof(decimal));
    
            var purchaseOrderNumParameter = purchaseOrderNum != null ?
                new ObjectParameter("PurchaseOrderNum", purchaseOrderNum) :
                new ObjectParameter("PurchaseOrderNum", typeof(string));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var paymentTermIDParameter = paymentTermID.HasValue ?
                new ObjectParameter("PaymentTermID", paymentTermID) :
                new ObjectParameter("PaymentTermID", typeof(int));
    
            var assignedUserIDParameter = assignedUserID.HasValue ?
                new ObjectParameter("AssignedUserID", assignedUserID) :
                new ObjectParameter("AssignedUserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInvoiceUpdate_Result>("uspInvoiceUpdate", companyIDParameter, nameParameter, opportunityIDParameter, invoiceNumberParameter, invoiceStageIDParameter, orderIDParameter, amountDueParameter, purchaseOrderNumParameter, dueDateParameter, paymentTermIDParameter, assignedUserIDParameter, teamIDParameter, recordIDParameter, isDeletedParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, invoiceIDParameter);
        }
    }
}
